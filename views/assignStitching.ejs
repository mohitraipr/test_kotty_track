<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Assign to Stitching</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <!-- Bootstrap Icons -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    rel="stylesheet"
  />
  <style>
    body {
      background: linear-gradient(to bottom right, #F0F2F5, #FFFFFF 70%);
      min-height: 100vh;
    }
    .navbar {
      background-color: #343a40;
    }
    .navbar-brand {
      font-weight: 500;
      display: flex;
      align-items: center;
    }
    .navbar-brand i {
      margin-right: 0.5rem;
    }
    .search-bar {
      max-width: 400px;
    }
    .card-accordion {
      border: none;
    }
    .accordion-item {
      border: none;
      border-radius: 0.5rem;
      margin-bottom: 0.5rem;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .accordion-button {
      border-radius: 0.5rem;
      padding: 1rem;
      font-weight: 500;
    }
    .accordion-button.collapsed {
      background-color: #ffffff;
      color: #495057;
    }
    .accordion-button:hover {
      background-color: #e9ecef;
    }
    .accordion-body {
      background-color: #fcfcfc;
    }
    .lot-row {
      transition: background-color 0.2s ease-in-out;
    }
    .lot-row:hover {
      background-color: #f8f9fa;
    }
    .lot-row strong {
      font-weight: 600;
    }
    .lot-row .form-select {
      min-width: 180px;
    }
    /* Flash message area */
    #ajaxFlash {
      position: fixed;
      top: 85px;
      right: 20px;
      z-index: 1055;
      width: auto;
      animation: fadeIn 0.3s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    /* Smaller screens styling */
    @media (max-width: 576px) {
      .lot-row {
        flex-direction: column;
        align-items: flex-start!important;
      }
      .lot-row .form-select {
        min-width: 100px;
      }
    }
  </style>
</head>
<body>
  <!-- NAVBAR -->
  <nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="/cutting-manager/dashboard">
        <i class="bi bi-arrow-left-circle me-1"></i>
        Back to Dashboard
      </a>
      <span class="navbar-text text-light ms-auto me-2">
        Logged in as <strong><%= user.username %></strong>
      </span>
      <a href="/logout" class="btn btn-outline-light btn-sm">
        <i class="bi bi-box-arrow-right me-1"></i> Logout
      </a>
    </div>
  </nav>

  <!-- MAIN CONTENT -->
  <div class="container py-4">
    <!-- Flash Messages (server-side) -->
    <% if (error && error.length > 0) { %>
      <div class="alert alert-danger alert-dismissible fade show d-flex align-items-center" role="alert">
        <i class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2"></i>
        <div><%= error %></div>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="alert"
          aria-label="Close"
        ></button>
      </div>
    <% } %>
    <% if (success && success.length > 0) { %>
      <div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert">
        <i class="bi bi-check-circle-fill flex-shrink-0 me-2"></i>
        <div><%= success %></div>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="alert"
          aria-label="Close"
        ></button>
      </div>
    <% } %>

    <!-- AJAX Flash (client-side) -->
    <div id="ajaxFlash" class="alert d-none" role="alert"></div>

    <!-- HEADER + SEARCH -->
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
      <h2 class="mb-0">
        <i class="bi bi-people-fill me-2"></i>
        Assign to Stitching
      </h2>
      <div class="search-bar input-group mt-3 mt-sm-0" style="max-width: 350px;">
        <input
          type="text"
          class="form-control"
          id="searchInput"
          placeholder="Search by Lot No or SKU..."
          aria-label="Search"
        />
        <button class="btn btn-secondary" id="searchBtn" type="button">
          <i class="bi bi-search"></i>
        </button>
      </div>
    </div>

    <!-- ACCORDION CONTAINER -->
    <div class="card card-accordion">
      <div class="accordion" id="lotsAccordion">
        <!-- Populated dynamically by JavaScript -->
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
  ></script>

  <script>
    let allLots = [];
    let stitchingUsers = [];

    document.addEventListener('DOMContentLoaded', async () => {
      try {
        // 1) Fetch unassigned lots
        const lotsRes = await fetch('/cutting-manager/assign-stitching/lots');
        const lotsData = await lotsRes.json();
        allLots = lotsData.lots || [];

        // 2) Fetch stitching users
        const usersRes = await fetch('/cutting-manager/assign-stitching/users');
        const usersData = await usersRes.json();
        stitchingUsers = usersData.users || [];

        // Render the accordion
        renderAccordion(allLots);
      } catch (error) {
        console.error('Error loading data for assignment page:', error);
        showFlash('error', 'Failed to load data.');
      }

      // Attach search handler
      document.getElementById('searchBtn').addEventListener('click', handleSearch);
      document.getElementById('searchInput').addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleSearch();
        }
      });
    });

    function renderAccordion(lots) {
      const accordion = document.getElementById('lotsAccordion');
      accordion.innerHTML = '';

      // If no lots found, show a friendly message
      if (!lots || lots.length === 0) {
        accordion.innerHTML = `
          <div class="text-center p-4">
            <p class="text-muted fs-5">No lots available for assignment.</p>
          </div>`;
        return;
      }

      // Group lots by date portion of created_at
      const groups = {};
      lots.forEach(lot => {
        const dateStr = new Date(lot.created_at).toLocaleDateString();
        if (!groups[dateStr]) groups[dateStr] = [];
        groups[dateStr].push(lot);
      });

      // Sort date groups descending
      const sortedDates = Object.keys(groups).sort((a, b) => {
        return new Date(b) - new Date(a);
      });

      // Build HTML for each date group
      sortedDates.forEach((dateStr, index) => {
        const groupId = `accordionGroup${index}`;
        const lotsHTML = groups[dateStr]
          .map(lot => getLotRowHTML(lot))
          .join('');

        const itemHTML = `
          <div class="accordion-item mb-2">
            <h2 class="accordion-header" id="heading${groupId}">
              <button
                class="accordion-button collapsed"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#collapse${groupId}"
                aria-expanded="false"
                aria-controls="collapse${groupId}"
              >
                Lots from <strong>${dateStr}</strong>
              </button>
            </h2>
            <div
              id="collapse${groupId}"
              class="accordion-collapse collapse"
              aria-labelledby="heading${groupId}"
              data-bs-parent="#lotsAccordion"
            >
              <div class="accordion-body">
                <div class="list-group">
                  ${lotsHTML}
                </div>
              </div>
            </div>
          </div>
        `;
        accordion.insertAdjacentHTML('beforeend', itemHTML);
      });
    }

    function getLotRowHTML(lot) {
      return `
        <div class="list-group-item lot-row d-flex justify-content-between align-items-center flex-wrap">
          <div class="mb-2 mb-sm-0">
            <span class="me-2">
              <i class="bi bi-hash"></i> <strong>${lot.lot_no}</strong>
            </span>
            <span class="me-2">
              <i class="bi bi-upc"></i> <strong>${lot.sku}</strong>
            </span>
            <span class="me-2">
              <i class="bi bi-upc"></i> <strong>${lot.remark}</strong>
            </span>
          </div>
          <div class="d-flex align-items-center">
            <select
              class="form-select form-select-sm me-2"
              data-lot-id="${lot.cutting_lot_id}"
              id="userSelect_${lot.cutting_lot_id}"
            >
              <option value="">--Select Stitching User--</option>
              ${stitchingUsers
                .map(user => `<option value="${user.id}">${user.username}</option>`)
                .join('')}
            </select>
            <button
              class="assign-btn btn btn-sm btn-primary"
              onclick="assignLot(${lot.cutting_lot_id})"
            >
              <i class="bi bi-send"></i> Assign
            </button>
          </div>
        </div>
      `;
    }

    async function assignLot(cuttingLotId) {
      // Disable all assign buttons to prevent duplicate assignments.
      const assignButtons = document.querySelectorAll('.assign-btn');
      assignButtons.forEach(btn => btn.disabled = true);

      try {
        const userSelect = document.getElementById(`userSelect_${cuttingLotId}`);
        const userId = userSelect.value;
        if (!userId) {
          showFlash('error', 'Please select a stitching user.');
          // Re-enable buttons if no user is selected.
          assignButtons.forEach(btn => btn.disabled = false);
          return;
        }

        const resp = await fetch('/cutting-manager/assign-stitching', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ cutting_lot_id: cuttingLotId, user_id: userId })
        });

        const data = await resp.json();
        if (data.error) {
          showFlash('error', data.error);
          // Re-enable assign buttons on error.
          assignButtons.forEach(btn => btn.disabled = false);
        } else if (data.success) {
          showFlash('success', data.message || 'Assigned successfully.');
          // Remove the assigned lot from allLots and re-render the accordion.
          allLots = allLots.filter(l => l.cutting_lot_id !== cuttingLotId);
          renderAccordion(allLots);
        }
      } catch (error) {
        console.error('Error assigning lot:', error);
        showFlash('error', 'Server error assigning lot.');
        // Re-enable assign buttons in case of server error.
        assignButtons.forEach(btn => btn.disabled = false);
      }
    }

    function handleSearch() {
      const searchVal = document.getElementById('searchInput').value.trim().toLowerCase();
      if (!searchVal) {
        // If no search, show all
        renderAccordion(allLots);
        return;
      }

      const filtered = allLots.filter(l => {
        return (
          l.lot_no.toLowerCase().includes(searchVal) ||
          l.sku.toLowerCase().includes(searchVal)
        );
      });

      renderAccordion(filtered);

      // Expand the relevant date groups automatically
      setTimeout(() => {
        const accordion = document.getElementById('lotsAccordion');
        const collapses = accordion.querySelectorAll('.accordion-collapse');
        collapses.forEach(col => {
          const match = col.querySelector('.lot-row');
          if (match) {
            new bootstrap.Collapse(col, { show: true });
          }
        });
      }, 50);
    }

    function showFlash(type, msg) {
      const flashDiv = document.getElementById('ajaxFlash');
      flashDiv.classList.remove('d-none', 'alert-danger', 'alert-success');
      flashDiv.textContent = msg;

      if (type === 'success') {
        flashDiv.classList.add('alert', 'alert-success');
      } else {
        flashDiv.classList.add('alert', 'alert-danger');
      }

      // Auto-hide after 4 seconds
      setTimeout(() => {
        flashDiv.classList.add('d-none');
      }, 4000);
    }
  </script>
</body>
</html>
