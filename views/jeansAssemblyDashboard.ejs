<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Jeans Assembly Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap 5 CSS & FontAwesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

  <style>
    body { background-color: #f8f9fa; }
    .navbar { box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .nav-tabs .nav-link { font-weight: 500; }

    /* make Select2 match Bootstrap 5 input height */
    .select2-container .select2-selection--single{
      height: calc(2.5rem + 2px);
      padding: 0.375rem 0.75rem;
      font-size: 1rem;
      line-height: 1.5;
    }
    .select2-selection__arrow{height:100%;}
    /* hide any legacy autocomplete widgets */
    .autocomplete-items{display:none!important;}
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="#">
        <i class="fas fa-people-carry"></i> Jeans Assembly Dashboard
      </a>
      <div class="ms-auto">
        <a href="/jeansassemblydashboard/approve" class="btn btn-outline-info btn-sm me-2">
          <i class="fas fa-check-circle"></i> Approvals
        </a>
        <a href="/challandashboard" class="btn btn-outline-info btn-sm me-2">
          <i class="fas fa-check-circle"></i> Challan
        </a>
        <a href="/logout" class="btn btn-outline-danger btn-sm">
          <i class="fas fa-sign-out-alt"></i> Logout
        </a>
      </div>
    </div>
  </nav>

  <div class="container my-4">
    <!-- Flash Messages -->
    <%- include('partials/flashMessages') %>

    <!-- Tabs -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <li class="nav-item">
        <button class="nav-link active" id="create-tab" data-bs-toggle="tab"
                data-bs-target="#createTab" type="button" role="tab">
          <i class="fas fa-plus-circle me-1"></i> Create Entry
        </button>
      </li>
      <li class="nav-item">
        <button class="nav-link" id="existing-tab" data-bs-toggle="tab"
                data-bs-target="#existingTab" type="button" role="tab">
          <i class="fas fa-list me-1"></i> Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3">
      <!-- CREATE ENTRY TAB -->
      <div class="tab-pane fade show active" id="createTab" role="tabpanel">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white">
            <i class="fas fa-plus-circle"></i> Create New Jeans Assembly Entry
          </div>
          <div class="card-body">
            <form id="createForm" enctype="multipart/form-data">
              <!-- LOT select -->
              <div class="mb-3">
                <label for="selectedLotId" class="form-label">Select Lot</label>
                <select id="selectedLotId" name="selectedLotId"
                        class="form-select" required>
                  <option value="">-- Choose a Lot --</option>
                  <% lots.forEach(l => { %>
                    <option value="<%= l.id %>">
                      Lot <%= l.lot_no %> (SKU: <%= l.sku %>) 
<% if (l.cutting_remark) { %>
                          - <%= l.cutting_remark %>
                        <% } %>
                    </option>
                  <% }) %>
                </select>
              </div>

              <div class="mb-3">
                <label class="form-label">Remark (optional)</label>
                <input type="text" name="remark" class="form-control"
                       placeholder="Enter remark...">
              </div>

              <div class="mb-3">
                <label class="form-label">Image (optional)</label>
                <input type="file" name="image_file" class="form-control"
                       accept="image/*">
              </div>

              <div class="mb-3">
                <label class="form-label">Assign to Washer</label>
                <select name="washer_id" class="form-select">
                  <option value="">-- Do not assign to washing --</option>
                  <% washers.forEach(w => { %>
                    <option value="<%= w.id %>"><%= w.username %></option>
                  <% }) %>
                </select>
                <p class="small text-muted mb-0">
                  Selecting a washer auto-assigns all created pieces.
                </p>
              </div>

              <!-- Size table -->
              <div id="lotSizesContainer" style="display:none;">
                <h5 class="mt-4">Sizes for This Lot</h5>
                <table class="table table-bordered" id="sizesTable">
                  <thead class="table-light">
                    <tr>
                      <th>Size Label</th><th>Max Available</th><th>Enter Pieces</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
                <div class="mt-2">
                  <strong>Total Pieces Selected:</strong>
                  <span id="createTotalPieces">0</span>
                </div>
              </div>

              <button class="btn btn-success mt-3" type="submit">
                <i class="fas fa-check me-1"></i> Create Jeans Assembly Entry
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB -->
      <div class="tab-pane fade" id="existingTab" role="tabpanel">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4><i class="fas fa-list"></i> Existing Jeans Assembly Entries</h4>
          <a class="btn btn-success" href="/jeansassemblydashboard/download-all">
            <i class="fas fa-file-excel me-1"></i> Download Excel
          </a>
        </div>

        <div class="input-group mb-3">
          <span class="input-group-text"><i class="fas fa-search"></i></span>
          <input id="searchExisting" class="form-control"
                 placeholder="Search by lot or SKU...">
        </div>

        <div id="existingEntriesContainer" class="accordion"></div>
        <div id="loadMoreSentinel" style="height:60px;"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div class="modal fade" id="updateModal" tabindex="-1"
       aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm">
          <div class="modal-header">
            <h5 class="modal-title" id="updateModalLabel">
              <i class="fas fa-edit"></i> Update Jeans Assembly Data
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <p><strong>Updating Entry ID:</strong>
               <span id="updatingEntryId"></span></p>
            <table class="table table-bordered" id="updateSizesTable">
              <thead class="table-light">
                <tr>
                  <th>Size Label</th><th>Already Used</th>
                  <th>Max Remain</th><th>New Pieces (Increment)</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
            <p class="small text-muted">Leave blank/zero for no increment.</p>
          </div>
          <div class="modal-footer">
            <button class="btn btn-secondary" type="button"
                    data-bs-dismiss="modal">
              <i class="fas fa-times"></i> Cancel
            </button>
            <button class="btn btn-primary" type="submit">
              <i class="fas fa-save"></i> Save Updates
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- SCRIPT SECTION -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    /* =========================================================
       SHARED DOM REFERENCES
    ============================================================*/
    const lotSizesContainer = document.getElementById('lotSizesContainer');
    const sizesTableBody    = document.querySelector('#sizesTable tbody');
    const createTotalPieces = document.getElementById('createTotalPieces');

    /* =========================================================
       0)  INITIALISE SEARCHABLE LOT SELECT + SIZE FETCH
    ============================================================*/
    $(function () {
      const $lot = $('#selectedLotId').select2({
        placeholder: '-- Choose a Lot --',
        allowClear : true,
        width      : '100%'
      });

      async function handleLotChange () {
        const lotId = $lot.val();
        if (!lotId) {
          sizesTableBody.innerHTML = '';
          lotSizesContainer.style.display = 'none';
          createTotalPieces.textContent = '0';
          return;
        }
        try {
          const res = await fetch(`/jeansassemblydashboard/get-lot-sizes/${lotId}`);
          if (!res.ok) throw new Error(res.status);
          renderSizes(await res.json());
        } catch (err) {
          console.error('Error fetching lot sizes:', err);
          sizesTableBody.innerHTML = '';
          lotSizesContainer.style.display = 'none';
          createTotalPieces.textContent = '0';
        }
      }

      // react to both selection and clear
      $lot.on('change select2:clear', handleLotChange);
    });

    /* helper to render each size row */
    function renderSizes(arr) {
      sizesTableBody.innerHTML = '';
      lotSizesContainer.style.display = 'block';
      arr.forEach(sz => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${sz.size_label}</td>
          <td>${sz.remain}</td>
          <td>
            <input type="number" class="form-control" min="1"
                   max="${sz.remain}" value="${sz.remain}"
                   data-size-id="${sz.id}">
          </td>`;
        sizesTableBody.appendChild(tr);
      });
      updateTotal();
    }

    /* live total pieces counter */
    function updateTotal() {
      let sum = 0;
      sizesTableBody.querySelectorAll('input').forEach(inp => {
        const v = parseInt(inp.value,10);
        if(!isNaN(v)&&v>0) sum += v;
      });
      createTotalPieces.textContent = sum;
    }
    sizesTableBody.addEventListener('input', updateTotal);

    /* =========================================================
       1)  CREATE FORM SUBMIT
    ============================================================*/
    document.getElementById('createForm').addEventListener('submit', async e => {
      e.preventDefault();
      const fd = new FormData(e.target);

      sizesTableBody.querySelectorAll('tr').forEach(row => {
        const inp = row.querySelector('input');
        let val   = parseInt(inp.value,10);
        if(!isNaN(val)&&val>0){
          fd.append(`sizes[${inp.dataset.sizeId}]`, val);
        }
      });

      try{
        const res = await fetch('/jeansassemblydashboard/create',{
          method:'POST', body:fd
        });
        if(res.redirected) return window.location.href = res.url;
        const j = await res.json().catch(()=>({}));
        if(j.error) alert(j.error); else window.location.reload();
      }catch(err){
        console.error('Create error:',err); alert('Error creating entry.');
      }
    });

    /* =========================================================
       2)  LAZY-LOAD EXISTING ENTRIES
    ============================================================*/
    let offset=0, loading=false, hasMore=true;
    const existingContainer = document.getElementById('existingEntriesContainer');
    const sentinel          = document.getElementById('loadMoreSentinel');
    const searchExisting    = document.getElementById('searchExisting');

    async function loadEntries(){
      if(loading||!hasMore) return;
      loading=true;
      try{
        const term=encodeURIComponent(searchExisting.value.trim());
        const r = await fetch(`/jeansassemblydashboard/list-entries?offset=${offset}&search=${term}`);
        if(!r.ok) throw new Error(r.status);
        const { data: list = [], hasMore: more } = await r.json();
        hasMore = more;
        list.forEach(addEntryCard);
        offset += list.length;
      }catch(e){ console.error('Load entries:',e); }
      finally{ loading=false; }
    }

    function addEntryCard(item){
      const headerId  = `head-${item.id}`;
      const collapseId= `coll-${item.id}`;
      const card = document.createElement('div');
      card.className='accordion-item';
      card.innerHTML = `
        <h2 class="accordion-header" id="${headerId}">
          <button class="accordion-button collapsed" type="button"
                  data-bs-toggle="collapse" data-bs-target="#${collapseId}"
                  aria-expanded="false" aria-controls="${collapseId}">
            <i class="fas fa-box-open me-1"></i>
            Lot ${item.lot_no} (SKU: ${item.sku}) - Total: ${item.total_pieces}
          </button>
        </h2>
        <div id="${collapseId}" class="accordion-collapse collapse"
             aria-labelledby="${headerId}" data-bs-parent="#existingEntriesContainer">
          <div class="accordion-body">
            <div class="d-flex justify-content-end mb-3">
              <a class="btn btn-sm btn-info me-2"
                 href="/jeansassemblydashboard/challan/${item.id}" target="_blank">
                <i class="fas fa-file-alt"></i> Challan
              </a>
              <button class="btn btn-sm btn-warning"
                      data-bs-toggle="modal" data-bs-target="#updateModal"
                      data-entry-id="${item.id}">
                <i class="fas fa-edit"></i> Update
              </button>
            </div>
            <p><strong>ID:</strong> ${item.id}</p>
            <p><strong>Remark:</strong> ${item.remark||'N/A'}</p>
            ${item.image_url?`<p><img src="${item.image_url}"
                         style="max-width:200px;"></p>`:''}
            <table class="table table-sm">
              <thead><tr><th>Size Label</th><th>Pieces</th></tr></thead>
              <tbody>
                ${
                  item.sizes?.length
                    ? item.sizes.map(s=>`<tr><td>${s.size_label}</td><td>${s.pieces}</td></tr>`).join('')
                    : '<tr><td colspan="2">No sizes</td></tr>'
                }
              </tbody>
            </table>
          </div>
        </div>`;
      existingContainer.appendChild(card);
    }

    new IntersectionObserver(
      e=>{ if(e[0].isIntersecting) loadEntries(); },
      {threshold:0.1}
    ).observe(sentinel);

    searchExisting.addEventListener('input', ()=>{
      offset=0; hasMore=true; existingContainer.innerHTML=''; loadEntries();
    });
    loadEntries();

    /* =========================================================
       3)  UPDATE MODAL
    ============================================================*/
    const updateModal = document.getElementById('updateModal');
    const updateSizesTable = document.getElementById('updateSizesTable');
    const updatingEntryId  = document.getElementById('updatingEntryId');
    updateModal.addEventListener('show.bs.modal', async evt=>{
      const entryId = evt.relatedTarget.getAttribute('data-entry-id');
      updatingEntryId.textContent = entryId;
      const tbody = updateSizesTable.querySelector('tbody');
      tbody.innerHTML='';
      document.getElementById('updateForm').action =
        `/jeansassemblydashboard/update/${entryId}`;

      try{
        const r = await fetch(`/jeansassemblydashboard/update/${entryId}/json`);
        if(!r.ok) throw new Error(r.status);
        const {sizes=[]}=await r.json();
        sizes.forEach(sz=>{
          const tr=document.createElement('tr');
          tr.innerHTML=`
            <td>${sz.size_label}</td>
            <td>${sz.pieces}</td>
            <td>${sz.remain??999999}</td>
            <td><input type="number" class="form-control" min="0"
                       placeholder="0" data-size-label="${sz.size_label}"></td>`;
          tbody.appendChild(tr);
        });
      }catch(e){ console.error('Fetch update sizes:',e); }
    });

    document.getElementById('updateForm').addEventListener('submit', async e=>{
      e.preventDefault();
      // remove old hidden fields
      document.querySelectorAll('.updateSizeMappingField').forEach(n=>n.remove());
      const rows = updateSizesTable.querySelectorAll('tbody tr');
      for(const row of rows){
        const label=row.children[0].textContent;
        const remain=parseInt(row.children[2].textContent,10);
        const val=parseInt(row.querySelector('input').value||'0',10);
        if(val>remain){return alert(`Cannot add ${val} to ${label}; only ${remain} remain`);}
        if(val>0){
          const h=document.createElement('input');
          h.type='hidden';h.className='updateSizeMappingField';
          h.name=`updateSizes[${label}]`;h.value=val;
          e.target.appendChild(h);
        }
      }
      try{
        const r=await fetch(e.target.action,{method:'POST',body:new FormData(e.target)});
        if(r.redirected) window.location.href=r.url;
      }catch(err){console.error('Update error:',err);}
    });
  </script>
</body>
</html>
