<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title data-i18n="cuttingManagerDashboardTitle">Cutting Manager Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />

  <!-- Bootstrap Icons -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    rel="stylesheet"
  />

  <!-- Custom CSS -->
  <style>
    body {
      background-color: #f8f9fa;
    }
    .card {
      margin-bottom: 1rem;
    }
    .roll-section, .size-section {
      border: 1px solid #dee2e6;
      margin-bottom: 1rem;
      padding: 1rem;
      border-radius: 0.5rem;
      background-color: #fff;
      position: relative;
    }
    .roll-section .remove-roll-btn, .size-section .removeSizeBtn {
      position: absolute;
      top: 10px;
      right: 10px;
    }
    .progress {
      height: 20px;
    }
    .progress-bar {
      transition: width 0.3s ease-in-out;
    }

    /* Autocomplete Styles */
    .autocomplete {
      position: relative;
      width: 100%;
    }
    .autocomplete input {
      width: 100%;
      padding: 0.375rem 0.75rem;
      border: 1px solid #ced4da;
      border-radius: 0.25rem;
      box-sizing: border-box;
    }
    .autocomplete-items {
      position: absolute;
      border: 1px solid #ced4da;
      border-top: none;
      z-index: 1000;
      top: 100%;
      left: 0;
      right: 0;
      max-height: 200px;
      overflow-y: auto;
      background-color: #fff;
      animation: fadeIn 0.2s ease-in-out;
      display: none; /* Hidden by default */
    }
    .autocomplete-items li {
      padding: 0.375rem 0.75rem;
      cursor: pointer;
    }
    .autocomplete-items li:hover, .autocomplete-active {
      background-color: #e9ecef;
    }
    /* Highlight matching text */
    .highlight {
      font-weight: bold;
      background-color: yellow;
    }
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    /* Mobile Enhancements */
    @media (max-width: 576px) {
      .navbar-brand {
        font-size: 1rem;
      }
      .navbar-text {
        display: none;
      }
      .btn {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
      }
      .table-responsive {
        font-size: 0.875rem;
      }
      .autocomplete-items {
        max-height: 150px;
      }
      .progress {
        height: 16px;
      }
      .progress-bar {
        font-size: 0.75rem;
      }
    }
    /* Language Toggle styling */
    .language-toggle {
      margin-right: 1rem;
      color: #fff;
    }
    .language-toggle input {
      margin-left: 5px;
      margin-right: 2px;
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-3">
    <div class="container-fluid">
      <a class="navbar-brand d-flex align-items-center" href="#">
        <i class="bi bi-speedometer2 me-2"></i> 
        <span data-i18n="cuttingManagerDashboardTitle">Cutting Manager Dashboard</span>
      </a>

      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent" 
        aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarContent">
        <!-- Language Toggle (Radio Buttons) -->
        <div class="ms-auto d-flex align-items-center">
          <div class="language-toggle">
            <span data-i18n="selectLanguage">Select Language:</span>
            <label>
              <input type="radio" name="language" value="en" checked />
              EN
            </label>
            <label>
              <input type="radio" name="language" value="hi" />
              HI
            </label>
          </div>
          <div class="d-flex align-items-center">
            <i class="bi bi-person-circle text-white me-2"></i>
            <!-- For example, you can partially localize text or keep dynamic user info as is -->
            <span class="navbar-text me-3 d-none d-sm-inline">
              <span data-i18n="welcomeUser">Welcome</span>, <strong><%= user.username %></strong> 
              (<%= user.roleName %>)
            </span>
            <a href="/logout" class="btn btn-outline-light btn-sm">
              <i class="bi bi-box-arrow-right me-1"></i> <span data-i18n="logout">Logout</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Container with Tabs -->
  <div class="container">
    <!-- Alert Messages -->
    <% if (error && error.length > 0) { %>
      <div class="alert alert-danger alert-dismissible fade show d-flex align-items-center" role="alert">
        <i class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2"></i>
        <div>
          <%= error %>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% } %>

    <% if (success && success.length > 0) { %>
      <div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert">
        <i class="bi bi-check-circle-fill flex-shrink-0 me-2"></i>
        <div>
          <%= success %>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% } %>

    <!-- Tabs for Navigation -->
    <ul class="nav nav-tabs mb-3" id="dashboardTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="existing-lots-tab" data-bs-toggle="tab" data-bs-target="#existing-lots" type="button" role="tab" aria-controls="existing-lots" aria-selected="true">
          <i class="bi bi-folder-fill me-1"></i> 
          <span data-i18n="existingCuttingLots">Existing Cutting Lots</span>
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="create-lot-tab" data-bs-toggle="tab" data-bs-target="#create-lot" type="button" role="tab" aria-controls="create-lot" aria-selected="false">
          <i class="bi bi-plus-circle-fill me-1"></i> 
          <span data-i18n="createNewCuttingLot">Create New Cutting Lot</span>
        </button>
      </li>
      <!-- NEW LINK: Instead of modifying this tabs approach extensively,
           we simply add a link to go to a separate page for "Assign to Stitching" -->
      <li class="nav-item" role="presentation">
        <a class="nav-link" href="/cutting-manager/assign-stitching">
          <i class="bi bi-people-fill me-1"></i>
          <span>Assign to Stitching</span>
        </a>
      </li>
    </ul>

    <div class="tab-content" id="dashboardTabsContent">
      <!-- Existing Cutting Lots Tab -->
      <div class="tab-pane fade show active" id="existing-lots" role="tabpanel" aria-labelledby="existing-lots-tab">
        <div class="card">
          <div class="card-header">
            <h2 class="mb-0">
              <i class="bi bi-folder-fill me-2"></i> 
              <span data-i18n="existingCuttingLots">Existing Cutting Lots</span>
            </h2>
          </div>
          <div class="card-body p-2">
            <div class="table-responsive">
              <table class="table table-bordered mb-4 bg-white">
                <thead class="table-dark">
                  <tr>
                    <th data-i18n="idLabel">ID</th>
                    <th data-i18n="lotNumberLabel">Lot Number</th>
                    <th data-i18n="skuLabel">SKU</th>
                    <th data-i18n="fabricTypeLabel">Fabric Type</th>
                    <th data-i18n="remarkLabel">Remark</th>
                    <th data-i18n="imageLabel">Image</th>
                    <th data-i18n="createdByLabel">Created By</th>
                    <th data-i18n="creationTimeLabel">Creation Time</th>
                    <th data-i18n="totalPiecesLabel">Total Pieces</th>
                    <th data-i18n="sizesLabel">Sizes</th>
                    <th data-i18n="actionsLabel">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (cuttingLots.length === 0) { %>
                    <tr>
                      <td colspan="11" class="text-center" data-i18n="noCuttingLotsAvailable">
                        No cutting lots available.
                      </td>
                    </tr>
                  <% } else { %>
                    <% cuttingLots.forEach(lot => { %>
                      <tr>
                        <td><%= lot.id %></td>
                        <td><%= lot.lot_no %></td>
                        <td><%= lot.sku %></td>
                        <td><%= lot.fabric_type %></td>
                        <td><%= lot.remark || 'N/A' %></td>
                        <td>
                          <% if (lot.image_url) { %>
                            <img 
                              src="/<%= lot.image_url %>" 
                              alt="lot image" 
                              class="img-fluid rounded" 
                              style="max-width:100px;"
                            />
                          <% } else { %>
                            <i class="bi bi-image text-muted"></i> 
                            <span data-i18n="notAvailable">Not available</span>
                          <% } %>
                        </td>
                        <td><%= lot.created_by || 'N/A' %></td>
                        <td>
                          <%= lot.created_at ? new Date(lot.created_at).toLocaleString() : 'N/A' %>
                        </td>
                        <td><%= lot.total_pieces || 0 %></td>
                        <td>
                          <% if (lot.sizes && lot.sizes.length > 0) { %>
                            <div class="table-responsive">
                              <table class="table table-sm mb-0">
                                <thead>
                                  <tr>
                                    <th data-i18n="sizeLabel">Size</th>
                                    <th data-i18n="patternCountLabel">Pattern Count</th>
                                    <th data-i18n="totalPiecesLabel">Total Pieces</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  <% lot.sizes.forEach(size => { %>
                                    <tr>
                                      <td><%= size.size_label %></td>
                                      <td><%= size.pattern_count %></td>
                                      <td><%= size.total_pieces %></td>
                                    </tr>
                                  <% }) %>
                                </tbody>
                              </table>
                            </div>
                          <% } else { %>
                            <i class="bi bi-list-stars text-muted"></i> 
                            <span data-i18n="notAvailable">Not available</span>
                          <% } %>
                        </td>
                        <td>
                          <div class="d-flex flex-column flex-sm-row gap-2">
                            <a href="/cutting-manager/generate-challan/<%= lot.id %>" class="btn btn-sm btn-primary">
                              <i class="bi bi-file-earmark-arrow-down me-1"></i> 
                              <span data-i18n="generateChallan">Generate Challan</span>
                            </a>
                            <a href="/cutting-manager/lot-details/<%= lot.id %>" class="btn btn-sm btn-info">
                              <i class="bi bi-eye me-1"></i> 
                              <span data-i18n="viewDetails">View Details</span>
                            </a>
                          </div>
                        </td>
                      </tr>
                    <% }) %>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Create New Cutting Lot Tab -->
      <div class="tab-pane fade" id="create-lot" role="tabpanel" aria-labelledby="create-lot-tab">
        <div class="card">
          <div class="card-header">
            <h3 class="mb-0">
              <i class="bi bi-plus-circle-fill me-2"></i> 
              <span data-i18n="createNewCuttingLot">Create New Cutting Lot</span>
            </h3>
          </div>
          <div class="card-body">
            <form
              id="lotForm"
              method="POST"
              action="/cutting-manager/create-lot"
              enctype="multipart/form-data"
            >
              <!-- Lot Details Section -->
              <div class="row g-3">
                <!-- Lot No (Read-Only) -->
                <div class="col-md-4">
                  <label for="lot_no" class="form-label">
                    <i class="bi bi-hash me-1"></i> 
                    <span data-i18n="lotNumberGenerated">Lot Number (Generated)</span>
                  </label>
                  <input
                    type="text"
                    class="form-control"
                    id="lot_no"
                    name="lot_no"
                    value="<%= generatedLotNumber %>"
                    readonly
                  />
                </div>

                <!-- SKU Input -->
                <div class="col-md-4">
                  <label for="sku" class="form-label">
                    <i class="bi bi-barcode me-1"></i> 
                    <span data-i18n="skuLabel">SKU</span>
                  </label>
                  <input
                    type="text"
                    class="form-control"
                    id="sku"
                    name="sku"
                    placeholder="Enter SKU"
                    pattern="^(?:[Kk][Tt][Tt]|[Cc][Cc]|[Kk][Tt][Yy]|[Kk][Oo][Tt][Tt][Yy]|[Ff]{2}[Kk][Tt][Tt])[A-Za-z]+\d+$"
                    title="Type The SKU In This Format(e.g., kttwomenspant261)"
                    required
                  />
                </div>

                <!-- Fabric Type (Autocomplete) -->
                <div class="col-md-4">
                  <label for="fabric_type_search" class="form-label">
                    <i class="bi bi-hexagon-fill me-1"></i> 
                    <span data-i18n="fabricTypeLabel">Fabric Type</span>
                  </label>
                  <div class="autocomplete">
                    <input
                      type="text"
                      id="fabric_type_search"
                      class="form-control"
                      placeholder="Search Fabric Type..."
                      aria-autocomplete="list"
                      aria-controls="fabric_type_options"
                      aria-expanded="false"
                      aria-haspopup="listbox"
                      required
                    >
                    <input type="hidden" id="fabric_type" name="fabric_type" required>
                    <ul class="autocomplete-items list-group d-none" id="fabric_type_options" role="listbox"></ul>
                  </div>
                </div>

                <!-- Remark -->
                <div class="col-md-6">
                  <label for="remark" class="form-label">
                    <i class="bi bi-chat-left-text me-1"></i> 
                    <span data-i18n="remarkLabel">Remark</span>
                  </label>
                  <textarea
                    class="form-control"
                    name="remark"
                    id="remark"
                    rows="2"
                    placeholder="Any note..."
                  ></textarea>
                </div>

                <!-- Image Upload -->
                <div class="col-md-6">
                  <label for="image" class="form-label">
                    <i class="bi bi-image me-1"></i> 
                    <span data-i18n="imageLabel">Image</span>
                  </label>
                  <input
                    type="file"
                    class="form-control"
                    name="image"
                    id="image"
                    accept="image/*"
                  />
                </div>
              </div>

              <hr/>
              <!-- Sizes and Patterns Section -->
              <div class="mb-3">
                <h4>
                  <i class="bi bi-list me-1"></i> 
                  <span data-i18n="sizesAndPatterns">Sizes and Patterns</span>
                </h4>
                <div id="sizesContainer"></div>
                <button
                  type="button"
                  class="btn btn-sm btn-secondary mt-2"
                  id="addSizeBtn"
                >
                  <i class="bi bi-plus-circle me-1"></i> 
                  <span data-i18n="addNewSize">Add New Size</span>
                </button>
              </div>

              <hr/>
              <!-- Rolls Used Section -->
              <div class="mb-3">
                <h4>
                  <i class="bi bi-box-seam me-1"></i> 
                  <span data-i18n="rollsUsed">Rolls Used</span>
                </h4>
                <div id="rollsContainer"></div>
                <button 
                  type="button" 
                  class="btn btn-sm btn-primary mt-2" 
                  id="addRollBtn" 
                  disabled
                >
                  <i class="bi bi-plus-circle me-1"></i> 
                  <span data-i18n="addAnotherRoll">Add Another Roll</span>
                </button>
              </div>

              <hr/>
              <!-- Total Pieces Display -->
              <div class="mb-3 d-flex justify-content-between align-items-center flex-wrap">
                <strong data-i18n="totalPiecesCalc">Total Pieces (Calculated):</strong>
                <span id="totalPiecesDisplay" class="fs-5 fw-bold">0</span>
              </div>

              <!-- Submit Button -->
              <button 
                type="submit" 
                class="btn btn-success w-100" 
                id="createLotBtn" 
                disabled
              >
                <i class="bi bi-check-circle me-1"></i> 
                <span data-i18n="createLotBtn">Create Lot</span>
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Size Template (Hidden) -->
  <div id="sizeTemplate" class="d-none">
    <div class="roll-section size-section">
      <button type="button" class="btn btn-sm btn-danger removeSizeBtn" aria-label="Remove size">
        <i class="bi bi-dash-circle me-1"></i> 
        <span data-i18n="remove">Remove</span>
      </button>
      <div class="row g-3">
        <div class="col-md-6">
          <label class="form-label visually-hidden" data-i18n="sizeLabel">Size</label>
          <select class="form-select sizeLabelSel" name="size_label[]" required>
            <option value="">--Select Size--</option>
            <option value="XS">XS</option>
            <option value="S">S</option>
            <option value="M">M</option>
            <option value="L">L</option>
            <option value="XL">XL</option>
            <option value="XXL">XXL</option>
            <option value="3XL">3XL</option>
            <option value="4XL">4XL</option>
            <option value="5XL">5XL</option>
            <option value="6XL">6XL</option>
            <option value="7XL">7XL</option>
            <option value="24">24</option>
            <option value="25">25</option>
            <option value="26">26</option>
            <option value="27">27</option>
            <option value="28">28</option>
            <option value="29">29</option>
            <option value="30">30</option>
            <option value="31">31</option>
            <option value="32">32</option>
            <option value="33">33</option>
            <option value="34">34</option>
            <option value="35">35</option>
            <option value="36">36</option>
            <option value="37">37</option>
            <option value="38">38</option>
            <option value="39">39</option>
            <option value="40">40</option>
            <option value="41">41</option>
            <option value="42">42</option>
          </select>
        </div>
        <div class="col-md-6">
          <label class="form-label visually-hidden" data-i18n="patternCountLabel">Pattern Count</label>
          <input
            type="number"
            class="form-control patternCountInput"
            min="1"
            step="0.01"
            value="1"
            name="pattern_count[]"
            required
            placeholder="Pattern Count"
          />
        </div>
      </div>
    </div>
  </div>

  <!-- Roll Template (Hidden) -->
  <div id="rollTemplate" class="d-none">
    <div class="roll-section">
      <button type="button" class="btn btn-sm btn-danger remove-roll-btn" aria-label="Remove roll">
        <i class="bi bi-x-circle"></i>
        <span data-i18n="remove">Remove</span>
      </button>
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label" data-i18n="rollNumber">Roll Number</label>
          <div class="autocomplete">
            <input
              type="text"
              class="form-control rollNo_search"
              placeholder="Search Roll..."
              aria-autocomplete="list"
              aria-controls="rollNo_options"
              aria-expanded="false"
              aria-haspopup="listbox"
              required
            >
            <input type="hidden" class="rollNoSel" name="roll_no[]" required>
            <ul class="autocomplete-items list-group d-none" role="listbox"></ul>
          </div>
        </div>
        <div class="col-md-4">
          <label class="form-label" data-i18n="layersLabel">Layers</label>
          <input
            type="number"
            class="form-control layersInput"
            name="layers[]"
            min="1"
            required
            placeholder="Layers"
          />
        </div>
        <div class="col-md-4">
          <label class="form-label" data-i18n="weightUsedLabel">Weight Used</label>
          <input
            type="number"
            step="0.01"
            class="form-control weightUsedInput"
            name="weight_used[]"
            min="0"
            required
            placeholder="Weight used"
          />
        </div>
      </div>
      <!-- Progress bar for used vs available -->
      <div class="mb-3">
        <label class="form-label">
          <i class="bi bi-graph-up me-1"></i> 
          <span data-i18n="weightUsageProgress">Weight Usage Progress</span>
        </label>
        <div class="progress">
          <div
            class="progress-bar bg-info"
            role="progressbar"
            style="width: 0%;"
            aria-valuenow="0"
            aria-valuemin="0"
            aria-valuemax="100"
          >
            0%
          </div>
        </div>
        <small class="text-muted">
          <span data-i18n="availableLabel">Available:</span> 
          <span class="availableWeightTxt">0</span>
        </small>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS and Dependencies -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
  ></script>

  <!-- Custom Script for Dynamic Functionality (Autocomplete + i18n Toggling) -->
  <script>
    // ====== Language Dictionaries ======
    const langData = {
      en: {
        cuttingManagerDashboardTitle: "Cutting Manager Dashboard",
        selectLanguage: "Select Language:",
        welcomeUser: "Welcome",
        logout: "Logout",
        existingCuttingLots: "Existing Cutting Lots",
        createNewCuttingLot: "Create New Cutting Lot",
        idLabel: "ID",
        lotNumberLabel: "Lot Number",
        skuLabel: "SKU",
        fabricTypeLabel: "Fabric Type",
        remarkLabel: "Remark",
        imageLabel: "Image",
        createdByLabel: "Created By",
        creationTimeLabel: "Creation Time",
        totalPiecesLabel: "Total Pieces",
        sizesLabel: "Sizes",
        actionsLabel: "Actions",
        noCuttingLotsAvailable: "No cutting lots available.",
        notAvailable: "Not available",
        sizeLabel: "Size",
        patternCountLabel: "Pattern Count",
        generateChallan: "Generate Challan",
        viewDetails: "View Details",
        lotNumberGenerated: "Lot Number (Generated)",
        createLotBtn: "Create Lot",
        remove: "Remove",
        rollNumber: "Roll Number",
        layersLabel: "Layers",
        weightUsedLabel: "Weight Used",
        weightUsageProgress: "Weight Usage Progress",
        availableLabel: "Available",
        sizesAndPatterns: "Sizes and Patterns",
        rollsUsed: "Rolls Used",
        addNewSize: "Add New Size",
        addAnotherRoll: "Add Another Roll",
        totalPiecesCalc: "Total Pieces (Calculated)"
      },
      hi: {
        cuttingManagerDashboardTitle: "काटिंग मैनेजर डैशबोर्ड",
        selectLanguage: "भाषा चुनें:",
        welcomeUser: "स्वागत हे",
        logout: "लॉगआउट",
        existingCuttingLots: "मौजूदा काटिंग लॉट्स",
        createNewCuttingLot: "नया काटिंग लॉट बनाएं",
        idLabel: "आईडी",
        lotNumberLabel: "लॉट नंबर",
        skuLabel: "एसकेयू",
        fabricTypeLabel: "फैब्रिक प्रकार",
        remarkLabel: "टिप्पणी",
        imageLabel: "छवि",
        createdByLabel: "बनाने वाले",
        creationTimeLabel: "बनाने का समय",
        totalPiecesLabel: "कुल पीस",
        sizesLabel: "साइज़",
        actionsLabel: "कार्रवाई",
        noCuttingLotsAvailable: "कोई काटिंग लॉट उपलब्ध नहीं है।",
        notAvailable: "उपलब्ध नहीं",
        sizeLabel: "साइज़",
        patternCountLabel: "पैटर्न की संख्या",
        generateChallan: "चालान बनाएं",
        viewDetails: "विवरण देखें",
        lotNumberGenerated: "लॉट नंबर (सिस्टम द्वारा तैयार)",
        createLotBtn: "लॉट तैयार करें",
        remove: "हटाएं",
        rollNumber: "रोल नंबर",
        layersLabel: "लेयर्स",
        weightUsedLabel: "उपयोग किया गया वज़न",
        weightUsageProgress: "वज़न उपयोग की प्रगति",
        availableLabel: "उपलब्ध",
        sizesAndPatterns: "साइज़ और पैटर्न",
        rollsUsed: "उपयोग किए गए रोल्स",
        addNewSize: "नया साइज़ जोड़ें",
        addAnotherRoll: "एक और रोल जोड़ें",
        totalPiecesCalc: "कुल पीस (हिसाब से)"
      }
    };

    let currentLanguage = "en"; // default

    function setLanguage(lang) {
      currentLanguage = lang;
      document.documentElement.lang = lang;
      // Loop through all [data-i18n] elements and set textContent
      const elements = document.querySelectorAll("[data-i18n]");
      elements.forEach(el => {
        const key = el.getAttribute("data-i18n");
        el.textContent = langData[lang][key] || el.textContent;
      });
    }

    // Listen for radio button changes
    document.addEventListener('DOMContentLoaded', () => {
      const langRadios = document.querySelectorAll('input[name="language"]');
      langRadios.forEach(radio => {
        radio.addEventListener('change', () => {
          setLanguage(radio.value);
        });
      });
      // Initialize with English (or whichever you like)
      setLanguage("en");
    });


    // ====== SERVER DATA: Rolls by Fabric Type ======
    const rollsByFabricType = <%- JSON.stringify(rollsByFabricType) %>;
    console.log("rollsByFabricType:", rollsByFabricType);

    // Key elements
    const sizeTemplate = document.getElementById('sizeTemplate');
    const rollTemplate = document.getElementById('rollTemplate');
    const sizesContainer = document.getElementById('sizesContainer');
    const addSizeBtn = document.getElementById('addSizeBtn');
    const rollsContainer = document.getElementById('rollsContainer');
    const addRollBtn = document.getElementById('addRollBtn');
    const totalPiecesDisplay = document.getElementById('totalPiecesDisplay');
    const fabricTypeSel = document.getElementById('fabric_type');
    const fabricTypeSearch = document.getElementById('fabric_type_search');
    const fabricTypeOptions = document.getElementById('fabric_type_options');
    const createLotBtn = document.getElementById('createLotBtn');

    // ====== Debounce Function ======
    function debounce(func, delay) {
      let debounceTimer;
      return function(...args) {
        const context = this;
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func.apply(context, args), delay);
      };
    }

    // ====== Autocomplete Initialization ======
    function initializeAutocomplete(inputField, hiddenField, optionsContainer, data = []) {
      populateOptions();

      inputField.addEventListener('focus', () => {
        if (inputField.value.trim() !== '') {
          optionsContainer.classList.remove('d-none');
          optionsContainer.classList.add('d-block');
          inputField.setAttribute('aria-expanded', 'true');
        }
      });

      document.addEventListener('click', (e) => {
        if (!inputField.contains(e.target) && !optionsContainer.contains(e.target)) {
          optionsContainer.classList.remove('d-block');
          optionsContainer.classList.add('d-none');
          inputField.setAttribute('aria-expanded', 'false');
        }
      });

      inputField.addEventListener('input', debounce(() => {
        const filter = inputField.value.toLowerCase();
        const options = optionsContainer.querySelectorAll('li.list-group-item:not(.no-results)');
        let visibleCount = 0;

        options.forEach(option => {
          const text = option.textContent.toLowerCase();
          if (text.includes(filter)) {
            option.style.display = 'block';
            const regex = new RegExp(`(${filter})`, 'gi');
            option.innerHTML = option.textContent.replace(regex, '<span class="highlight">$1</span>');
            visibleCount++;
          } else {
            option.style.display = 'none';
            option.innerHTML = option.textContent;
          }
        });

        const noResult = optionsContainer.querySelector('.no-results');
        if (visibleCount === 0) {
          if (!noResult) {
            const li = document.createElement('li');
            li.classList.add('list-group-item', 'no-results');
            li.textContent = 'No matching results.';
            optionsContainer.appendChild(li);
          }
        } else {
          if (noResult) {
            noResult.remove();
          }
        }

        if (inputField.value.trim() !== '') {
          optionsContainer.classList.remove('d-none');
          optionsContainer.classList.add('d-block');
          inputField.setAttribute('aria-expanded', 'true');
        } else {
          optionsContainer.classList.remove('d-block');
          optionsContainer.classList.add('d-none');
          inputField.setAttribute('aria-expanded', 'false');
        }

        checkRollsCompletion();
      }, 300));

      optionsContainer.addEventListener('click', (e) => {
        if (e.target && e.target.matches('li.list-group-item') && !e.target.classList.contains('no-results')) {
          const selectedValue = e.target.dataset.value;
          const selectedText = e.target.textContent;
          hiddenField.value = selectedValue;
          inputField.value = selectedText;
          optionsContainer.classList.remove('d-block');
          optionsContainer.classList.add('d-none');
          inputField.setAttribute('aria-expanded', 'false');
          hiddenField.dispatchEvent(new Event('change'));

          checkRollsCompletion();
        }
      });

      let currentFocus = -1;
      inputField.addEventListener('keydown', function(e) {
        const items = optionsContainer.querySelectorAll('li.list-group-item:not(.no-results)');
        if (e.key === 'ArrowDown') {
          currentFocus++;
          addActive(items);
          e.preventDefault();
        } else if (e.key === 'ArrowUp') {
          currentFocus--;
          addActive(items);
          e.preventDefault();
        } else if (e.key === 'Enter') {
          e.preventDefault();
          if (currentFocus > -1 && items[currentFocus]) {
            items[currentFocus].click();
          }
        }
      });

      function addActive(items) {
        if (!items) return;
        removeActive(items);
        if (currentFocus >= items.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = items.length - 1;
        items[currentFocus].classList.add('active');
        items[currentFocus].setAttribute('aria-selected', 'true');
      }

      function removeActive(items) {
        items.forEach(item => {
          item.classList.remove('active');
          item.setAttribute('aria-selected', 'false');
        });
      }

      function populateOptions() {
        optionsContainer.innerHTML = '';
        data.forEach(item => {
          let displayText = item;
          let value = item;
          let availableWeight = '';

          if (typeof item === 'object' && item !== null) {
            displayText = item.displayText;
            value = item.value;
            availableWeight = item.availableWeight || '';
          }

          const li = document.createElement('li');
          li.classList.add('list-group-item', 'list-group-item-action');
          li.setAttribute('role', 'option');
          li.setAttribute('aria-selected', 'false');
          li.textContent = displayText;
          li.dataset.value = value;
          if (availableWeight) {
            li.dataset.availableWeight = availableWeight;
          }
          optionsContainer.appendChild(li);
        });
      }
    }

    // Setup the fabric type autocomplete
    const fabricTypes = Object.keys(rollsByFabricType);
    const fabricTypeData = fabricTypes.map(ft => ({
      displayText: ft,
      value: ft
    }));
    initializeAutocomplete(
      fabricTypeSearch, 
      fabricTypeSel, 
      fabricTypeOptions, 
      fabricTypeData
    );

    function initializeRollNoAutocomplete(rollSection, fabricType) {
      const rollNoSel = rollSection.querySelector('.rollNoSel');
      const rollNoSearch = rollSection.querySelector('.rollNo_search');
      const rollNoOptions = rollSection.querySelector('.autocomplete-items');
      const weightUsedInput = rollSection.querySelector('.weightUsedInput');

      const availableRolls = rollsByFabricType[fabricType] || [];

      const rollData = availableRolls.map(roll => ({
        displayText: `${roll.roll_no} (Available: ${roll.per_roll_weight} ${roll.unit}) (Vendor: ${roll.vendor_name})`,
        value: roll.roll_no,
        availableWeight: roll.per_roll_weight,
        unit: roll.unit
      }));

      initializeAutocomplete(rollNoSearch, rollNoSel, rollNoOptions, rollData);

      rollNoSearch.placeholder = `Search Roll (${fabricType})...`;
      weightUsedInput.placeholder = `Weight used (${fabricType})...`;

      rollNoSel.addEventListener('change', () => {
        const selectedRollNo = rollNoSel.value;
        const selectedRoll = availableRolls.find(r => r.roll_no === selectedRollNo);
        if (selectedRoll) {
          const availableWeightTxt = rollSection.querySelector('.availableWeightTxt');
          availableWeightTxt.textContent = parseFloat(selectedRoll.per_roll_weight).toFixed(2);
          weightUsedInput.max = selectedRoll.per_roll_weight;
          weightUsedInput.placeholder = `Roll ${selectedRoll.roll_no} weight used (${selectedRoll.unit})`;
          updateWeightProgress(rollSection);
        } else {
          const availableWeightTxt = rollSection.querySelector('.availableWeightTxt');
          availableWeightTxt.textContent = '0';
          weightUsedInput.value = '';
          weightUsedInput.removeAttribute('max');
          weightUsedInput.placeholder = `Weight used (${fabricType})...`;

          const progressBar = rollSection.querySelector('.progress-bar');
          progressBar.style.width = '0%';
          progressBar.textContent = '0%';
          progressBar.classList.remove('bg-danger');
          progressBar.classList.add('bg-info');
        }
        checkRollsCompletion();
      });

      weightUsedInput.addEventListener('input', () => {
        updateWeightProgress(rollSection);
        checkRollsCompletion();
      });

      const layersInput = rollSection.querySelector('.layersInput');
      layersInput.addEventListener('input', () => {
        checkRollsCompletion();
      });
    }

    // ====== Add new size row ======
    function addNewSize() {
      const newSize = sizeTemplate.cloneNode(true);
      newSize.classList.remove('d-none');
      newSize.removeAttribute('id');
      sizesContainer.appendChild(newSize);

      const removeSizeBtn = newSize.querySelector('.removeSizeBtn');
      removeSizeBtn.addEventListener('click', () => {
        newSize.remove();
        updateTotalPieces();
        checkRollsCompletion();
      });

      const patternCountInput = newSize.querySelector('.patternCountInput');
      patternCountInput.addEventListener('input', () => {
        updateTotalPieces();
      });
    }

    // ====== Add new roll row ======
    function addNewRoll() {
      const newRoll = rollTemplate.cloneNode(true);
      newRoll.classList.remove('d-none');
      newRoll.removeAttribute('id');
      rollsContainer.appendChild(newRoll);

      const removeRollBtn = newRoll.querySelector('.remove-roll-btn');
      removeRollBtn.addEventListener('click', () => {
        newRoll.remove();
        updateTotalPieces();
        checkRollsCompletion();
      });

      const layersInput = newRoll.querySelector('.layersInput');
      layersInput.addEventListener('input', () => {
        updateTotalPieces();
        checkRollsCompletion();
      });

      const weightUsedInput = newRoll.querySelector('.weightUsedInput');
      weightUsedInput.addEventListener('input', () => {
        updateWeightProgress(newRoll);
        checkRollsCompletion();
      });

      // Based on currently selected fabric type
      const currentFabricType = fabricTypeSel.value;
      if (currentFabricType) {
        initializeRollNoAutocomplete(newRoll, currentFabricType);
      } else {
        newRoll.querySelector('.rollNo_search').placeholder = 'Search Roll...';
        weightUsedInput.placeholder = 'Weight used...';
      }
    }

    function updateWeightProgress(rollSection) {
      const rollNoSel = rollSection.querySelector('.rollNoSel');
      const selectedRollNo = rollNoSel.value;
      const rollData = Object.values(rollsByFabricType).flat().find(r => r.roll_no === selectedRollNo);

      if (!rollData) return;

      const available = parseFloat(rollData.per_roll_weight) || 0;
      const weightUsed = parseFloat(rollSection.querySelector('.weightUsedInput').value) || 0;
      const bar = rollSection.querySelector('.progress-bar');
      const ratio = available === 0 ? 0 : (weightUsed / available) * 100;
      const percent = isNaN(ratio) ? 0 : Math.min(Math.max(ratio, 0), 100).toFixed(1);

      bar.style.width = `${percent}%`;
      bar.textContent = `${percent}%`;
      bar.setAttribute('aria-valuenow', percent);

      if (weightUsed > available) {
        bar.classList.remove('bg-info');
        bar.classList.add('bg-danger');
      } else {
        bar.classList.remove('bg-danger');
        bar.classList.add('bg-info');
      }
    }

    // ====== Calculate total pieces (patterns * layers) ======
    function updateTotalPieces() {
      let totalPatterns = 0;
      sizesContainer.querySelectorAll('.size-section:not(.d-none)').forEach(sr => {
        const patternCount = parseFloat(sr.querySelector('.patternCountInput').value || '0');
        totalPatterns += patternCount;
      });

      let totalLayers = 0;
      rollsContainer.querySelectorAll('.roll-section:not(.d-none)').forEach(rs => {
        const layers = parseFloat(rs.querySelector('.layersInput').value || '0');
        totalLayers += layers;
      });

      let totalPieces = totalPatterns * totalLayers;
      totalPieces = isNaN(totalPieces) ? 0 : totalPieces;

      totalPiecesDisplay.textContent = totalPieces;
    }

    function populateRollNos(selectedFabricType) {
      const rollNoSels = rollsContainer.querySelectorAll('.rollNoSel');
      rollNoSels.forEach(rollNoSel => {
        const rollSection = rollNoSel.closest('.roll-section');
        const rollNoSearch = rollSection.querySelector('.rollNo_search');
        const rollNoOptions = rollSection.querySelector('.autocomplete-items');
        const weightUsedInput = rollSection.querySelector('.weightUsedInput');

        const availableRolls = rollsByFabricType[selectedFabricType] || [];
        const rollData = availableRolls.map(roll => ({
          displayText: `${roll.roll_no} (Available: ${roll.per_roll_weight} ${roll.unit}) (Vendor: ${roll.vendor_name})`,
          value: roll.roll_no,
          availableWeight: roll.per_roll_weight,
          unit: roll.unit
        }));

        initializeAutocomplete(rollNoSearch, rollNoSel, rollNoOptions, rollData);
        rollNoSearch.placeholder = `Search Roll (${selectedFabricType})...`;
        weightUsedInput.placeholder = `Weight used (${selectedFabricType})...`;

        const availableWeightTxt = rollSection.querySelector('.availableWeightTxt');
        availableWeightTxt.textContent = '0';
        weightUsedInput.value = '';
        weightUsedInput.removeAttribute('max');
        const progressBar = rollSection.querySelector('.progress-bar');
        progressBar.style.width = '0%';
        progressBar.textContent = '0%';
        progressBar.setAttribute('aria-valuenow', '0');
        progressBar.classList.remove('bg-danger');
        progressBar.classList.add('bg-info');
      });
    }

    // Fabric type change event
    fabricTypeSel.addEventListener('change', () => {
      const selectedFabricType = fabricTypeSel.value;
      if (selectedFabricType) {
        addRollBtn.disabled = false;
        rollsContainer.innerHTML = '';
        populateRollNos(selectedFabricType);
        updateTotalPieces();
      } else {
        addRollBtn.disabled = true;
        rollsContainer.innerHTML = '';
        updateTotalPieces();
      }
      checkRollsCompletion();
    });

    // Button event listeners
    addSizeBtn.addEventListener('click', addNewSize);
    addRollBtn.addEventListener('click', addNewRoll);

    // Initialize with 1 size row
    addNewSize();

    document.addEventListener('DOMContentLoaded', () => {
      const existingRollSections = rollsContainer.querySelectorAll('.roll-section');
      existingRollSections.forEach(rollSection => {
        const fabricType = fabricTypeSel.value;
        if (fabricType) {
          initializeRollNoAutocomplete(rollSection, fabricType);
        }
      });
      checkRollsCompletion();
    });

    function checkRollsCompletion() {
      const allRollSections = rollsContainer.querySelectorAll('.roll-section');

      // If no roll sections yet, disable the final create-lot button
      if (allRollSections.length === 0) {
        createLotBtn.disabled = true;
        return;
      }

      let allFilled = true;
      allRollSections.forEach(roll => {
        const rollNo = roll.querySelector('.rollNoSel').value.trim();
        const layers = roll.querySelector('.layersInput').value.trim();
        const weightUsed = roll.querySelector('.weightUsedInput').value.trim();

        if (!rollNo || !layers || !weightUsed) {
          allFilled = false;
        }
      });

      createLotBtn.disabled = !allFilled;
    }

  document.getElementById('lotForm').addEventListener('submit', function(e) {
  // Disable the create lot button to prevent multiple submissions.
  document.getElementById('createLotBtn').disabled = true;
});
  </script>
</body>
</html>
