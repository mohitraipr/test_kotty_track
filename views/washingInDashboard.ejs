<!-- views/washingin.ejs - Washing In Dashboard Template -->
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Character encoding and responsive design meta tags -->
  <meta charset="UTF-8" />
  <title>KOTTY - Washing In Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

  <!-- Bootstrap CSS for styling and layout -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <!-- FontAwesome for icons -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />

  <!-- Select2 CSS for enhanced select dropdowns -->
  <link
    href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"
    rel="stylesheet"
  />

  <!-- Custom inline styles for layout and animations -->
  <style>
    body            { background:#f8f9fa; color:#212529; min-height:100vh; display:flex; flex-direction:column; }
    .card           { border-radius:6px; margin-bottom:20px; }
    .navbar-brand   { font-weight:500; font-size:1.2rem; }
    .fade-in        { animation:fadeIn .4s ease-in; }
    @keyframes fadeIn { from{opacity:0} to{opacity:1} }
    .main-content   { flex:1 0 auto; }
    #loadMoreSentinel{ height:40px; }
    .select2-container{ width:100%!important; }
  </style>
</head>
<body>
  <!-- NAVBAR: top navigation links for various washing-in actions -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid px-3">
      <!-- Brand / Home link -->
      <a class="navbar-brand" href="#"><i class="fas fa-water"></i> Washing In</a>
      <!-- Hamburger toggle for mobile -->
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
              data-bs-target="#navbarContent" aria-controls="navbarContent"
              aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <!-- Navbar links -->
      <div class="collapse navbar-collapse" id="navbarContent">
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
          <!-- Link to Approve washing assignments -->
          <li class="nav-item me-2">
            <a href="/washingin/approve" class="btn btn-outline-light btn-sm">
              <i class="fas fa-check-circle"></i> Approve
            </a>
          </li>
          <!-- Link to Assign finishing -->
          <li class="nav-item me-2">
            <a href="/washingin/assign-finishing" class="btn btn-outline-light btn-sm">
              <i class="fas fa-user-check"></i> Assign Finishing
            </a>
          </li>
          <!-- Link to Assign Re-wash -->
          <li class="nav-item me-2">
            <a href="/washingin/assign-rewash" class="btn btn-outline-light btn-sm">
              <i class="fas fa-undo"></i> Re-wash
            </a>
          </li>
          <!-- Link to Complete Re-wash -->
          <li class="nav-item me-2">
            <a href="/washingin/assign-rewash/pending" class="btn btn-outline-light btn-sm">
              <i class="fas fa-undo"></i> Complete Re-wash
            </a>
          </li>
          <!-- Logout button -->
          <li class="nav-item">
            <a href="/logout" class="btn btn-sm btn-danger">
              <i class="fas fa-sign-out-alt"></i> Logout
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- FLASH MESSAGES: show success or error alerts -->
  <div class="container mt-3">
    <% if (error && error.length) { error.forEach(msg => { %>
      <!-- Error alert -->
      <div class="alert alert-danger alert-dismissible fade show">
        <%= msg %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% }) } %>
    <% if (success && success.length) { success.forEach(msg => { %>
      <!-- Success alert -->
      <div class="alert alert-success alert-dismissible fade show">
        <%= msg %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% }) } %>
  </div>

  <!-- MAIN CONTENT AREA -->
  <div class="container my-4 main-content">
    <!-- Dashboard title -->
    <h2 class="mb-4"><i class="fas fa-water"></i> Washing In Dashboard</h2>

    <!-- TAB NAVIGATION: Create Entry vs Existing Entries -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <!-- Create Entry tab -->
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="create-tab" data-bs-toggle="tab"
                data-bs-target="#createTabContent" type="button" role="tab"
                aria-controls="createTabContent" aria-selected="true">
          <i class="fas fa-plus-circle"></i> Create Entry
        </button>
      </li>
      <!-- Existing Entries tab -->
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="existing-tab" data-bs-toggle="tab"
                data-bs-target="#existingTabContent" type="button" role="tab"
                aria-controls="existingTabContent" aria-selected="false">
          <i class="fas fa-list"></i> Existing Entries
        </button>
      </li>
    </ul>

    <!-- TAB CONTENT PANES -->
    <div class="tab-content mt-3" id="dashboardTabsContent">
      <!-- CREATE TAB CONTENT -->
      <div class="tab-pane fade show active" id="createTabContent" role="tabpanel">
        <div class="card">
          <!-- Card header -->
          <div class="card-header">
            <h4 class="mb-0"><i class="fas fa-plus-circle"></i> Create New Washing In Entry</h4>
          </div>
          <!-- Card body with form -->
          <div class="card-body">
            <form id="createForm" action="/washingin/create" method="POST" enctype="multipart/form-data">
              <div class="row">
                <!-- Dropdown to select existing washing data lot -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">Select Washing Data</label>
                  <select id="selectedWashingDataId" name="selectedWashingDataId" class="form-select" required>
                    <option value="">-- Choose --</option>
                    <% lots.forEach(l => { %>
                      <option value="<%= l.id %>">
                        <% if (l.cutting_remark) { %>- <%= l.cutting_remark %> <% } %>
                        <%= l.lot_no %> (SKU:<%= l.sku %>) - total: <%= l.total_pieces %>
                      </option>
                    <% }) %>
                  </select>
                </div>
                <!-- Optional remark input -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">Remark (optional)</label>
                  <input type="text" class="form-control" name="remark" placeholder="Any remarks..." />
                </div>
                <!-- Optional image upload -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">Image (optional)</label>
                  <input type="file" class="form-control" name="image_file" accept="image/*" />
                </div>
              </div>

              <!-- SIZE SECTION: dynamically shown when a lot is selected -->
              <div id="sizeSection" style="display:none;">
                <h5>Sizes for This Washing Data</h5>
                <div class="table-responsive">
                  <table class="table table-bordered align-middle" id="sizeTable">
                    <thead class="table-light">
                      <tr>
                        <th>Size Label</th>
                        <th>Max Available</th>
                        <th>Enter Pieces</th>
                        <th>Assign to Finishing (Optional)</th>
                      </tr>
                    </thead>
                    <tbody>
                      <!-- Rows inserted via JavaScript -->
                    </tbody>
                  </table>
                </div>
                <!-- Display total pieces selected as user inputs quantities -->
                <div class="mt-2">
                  <strong>Total Pieces Selected:</strong> <span id="createTotalPieces">0</span>
                </div>
              </div>

              <!-- Submit button -->
              <button type="submit" class="btn btn-primary mt-3">
                <i class="fas fa-check"></i> Create & Assign
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB CONTENT -->
      <div class="tab-pane fade" id="existingTabContent" role="tabpanel">
        <!-- Header with download button -->
        <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center mb-3">
          <h4 class="mb-2 mb-sm-0"><i class="fas fa-list"></i> Existing Entries</h4>
          <a href="/washingin/download-all" class="btn btn-success">
            <i class="fas fa-file-excel"></i> Download Excel
          </a>
        </div>

        <!-- Search input for filtering entries -->
        <div class="input-group mb-3">
          <span class="input-group-text"><i class="fas fa-search"></i></span>
          <input type="text" id="searchExisting" class="form-control" placeholder="Search by lot or SKU..." />
        </div>

        <!-- Accordion container for lazy-loaded entries -->
        <div id="existingEntriesContainer" class="accordion"></div>
        <!-- Sentinel element for infinite scroll -->
        <div id="loadMoreSentinel"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL: for incrementing pieces on an existing entry -->
  <div class="modal fade" id="updateModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST" action="">
          <div class="modal-header">
            <h5 class="modal-title"><i class="fas fa-edit"></i> Update Washing In Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <!-- Display entry ID being updated -->
            <p>
              <strong>Updating Entry ID:</strong>
              <span id="updatingEntryId">-</span>
            </p>
            <!-- Table for showing existing sizes and allowing increment -->
            <div class="table-responsive">
              <table class="table table-bordered align-middle" id="updateSizesTable">
                <thead class="table-light">
                  <tr>
                    <th>Size Label</th>
                    <th>Already Used</th>
                    <th>Max Remain</th>
                    <th>New Pieces (Increment)</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Rows inserted via JavaScript when modal opens -->
                </tbody>
              </table>
            </div>
            <p class="small text-muted">
              Leave blank or zero if no increment.
            </p>
          </div>
          <div class="modal-footer">
            <!-- Cancel and Save buttons -->
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i> Save Updates
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- SCRIPT INCLUDES: jQuery, Bootstrap JS, Select2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

  <!-- INLINE JAVASCRIPT: handles create flow, existing entries loading, and update modal -->
  <script>
  $(function () {
    // ---------- 0. GLOBALS ----------
    let finishingUsers = [];        // Cache of users for assigning finishing
    let existingOffset = 0;         // Offset for pagination of existing entries
    let loading = false;            // Prevent duplicate loads
    let hasMore = true;             // Indicates if more entries are available

    // ---------- 1. CREATE FLOW ----------
    const $sizeSection       = $('#sizeSection'),
          $sizeTableBody     = $('#sizeTable tbody'),
          $createTotalPieces = $('#createTotalPieces'),
          $createForm        = $('#createForm');

    // Initialize Select2 on washing data dropdown
    $('#selectedWashingDataId').select2({ placeholder:'Select Washing Data', minimumResultsForSearch:0 });

    // When a lot is selected, fetch sizes and users
    $('#selectedWashingDataId').on('change', async function () {
      const lotId = $(this).val();
      if (!lotId) { resetSizeSection(); return; }

      try {
        // Parallel fetch: sizes and finishing users (only once)
        const [sizeRes, userRes] = await Promise.all([
          fetch(`/washingin/get-lot-sizes/${lotId}`),
          finishingUsers.length ? null : fetch('/washingin/create/assignable-users')
        ]);
        if (!sizeRes.ok) throw new Error('Size fetch failed');
        const sizes = await sizeRes.json();

        if (userRes && userRes.ok) {
          finishingUsers = (await userRes.json()).data || [];
        }

        renderSizes(sizes);
      } catch (err) {
        console.error(err);
        resetSizeSection();
      }
    });

    // Hide size section and clear data
    function resetSizeSection () {
      $sizeSection.hide();
      $sizeTableBody.empty();
      $createTotalPieces.text('0');
    }

    // Render size rows with inputs and assignment dropdowns
    function renderSizes (sizes) {
      $sizeSection.show();
      $sizeTableBody.empty();

      sizes.forEach(s => {
        const $tr = $(`
          <tr>
            <td>${s.size_label}</td>
            <td>${s.remain}</td>
            <td>
              <input type="number" class="form-control" min="0" max="${s.remain}"
                     value="0" data-size-id="${s.id}" autocomplete="off">
            </td>
            <td>
              <select class="form-select">
                <option value="">--No Assignment--</option>
              </select>
            </td>
          </tr>
        `);
        // Populate assignment dropdown
        const $sel = $tr.find('select');
        finishingUsers.forEach(u => {
          $sel.append(`<option value="${u.id}">${u.username}</option>`);
        });
        // Update total when input changes
        $tr.find('input').on('input', updateCreateTotal);
        $sizeTableBody.append($tr);
      });
      updateCreateTotal();
    }

    // Sum up entered pieces and display
    function updateCreateTotal () {
      let total = 0;
      $sizeTableBody.find('input').each((_, el) => {
        const v = +el.value;
        if (v > 0) total += v;
      });
      $createTotalPieces.text(total);
    }

    // On form submit, validate and append hidden fields for sizes and assignments
    $createForm.on('submit', function (e) {
      const $form = $(this);
      $form.find('.sizeField,.assignField').remove();

      let valid = true;
      $sizeTableBody.find('tr').each((_, row) => {
        const $row   = $(row),
              remain = +$row.children('td').eq(1).text(),
              $inp   = $row.find('input'),
              val    = +$inp.val() || 0;

        // Validate against remaining stock
        if (val > remain) {
          alert(`Requested ${val} but only ${remain} remain for size ${$row.children('td').eq(0).text()}`);
          valid = false;
          return false;
        }

        // Add hidden input for each size with quantity > 0
        if (val > 0) {
          $('<input>', {
            type:'hidden',
            name:`sizes[${$inp.data('sizeId')}]`,
            value:val,
            class:'sizeField'
          }).appendTo($form);
        }

        // Add hidden input for assignment if selected
        const assign = $row.find('select').val();
        if (assign) {
          $('<input>', {
            type:'hidden',
            name:`assignments[${$inp.data('sizeId')}]`,
            value:assign,
            class:'assignField'
          }).appendTo($form);
        }
      });

      if (!valid) e.preventDefault();
    });

    // ---------- 2. EXISTING LIST (lazy load + search) ----------
    const $existingContainer = $('#existingEntriesContainer'),
          $searchExisting    = $('#searchExisting'),
          sentinel           = document.getElementById('loadMoreSentinel');

    // Load more entries when scrolling
    async function loadMoreEntries () {
      if (loading || !hasMore) return;
      loading = true;
      try {
        const res = await fetch(
          `/washingin/list-entries?offset=${existingOffset}` +
          `&search=${encodeURIComponent($searchExisting.val().trim())}`
        );
        if (!res.ok) throw new Error('HTTP '+res.status);
        const { data: items = [], hasMore: more } = await res.json();
        hasMore = more;

        // Append each entry as an accordion item
        items.forEach(it => {
          const hid   = `heading-${it.id}`,
                cid   = `collapse-${it.id}`,
                rows  = (it.sizes||[]).map(s =>
                  `<tr><td>${s.size_label}</td><td>${s.pieces}</td></tr>`
                ).join('') || '<tr><td colspan="2">No sizes found.</td></tr>';

          $existingContainer.append(`
            <div class="accordion-item fade-in">
              <h2 class="accordion-header" id="${hid}">
                <button class="accordion-button collapsed"
                        data-bs-toggle="collapse" data-bs-target="#${cid}">
                  <strong>Lot:</strong> ${it.lot_no}
                  (SKU:${it.sku}) - Total: ${it.total_pieces}
                </button>
              </h2>
              <div id="${cid}" class="accordion-collapse collapse"
                   data-bs-parent="#existingEntriesContainer">
                <div class="accordion-body">
                  <!-- Action buttons: challan download and update -->
                  <div class="d-flex justify-content-end mb-3">
                    <a href="/washingin/challan/${it.id}"
                       class="btn btn-info btn-sm me-2" target="_blank">
                      <i class="fas fa-file-download"></i> Challan
                    </a>
                    <button class="btn btn-warning btn-sm"
                            data-bs-toggle="modal"
                            data-bs-target="#updateModal"
                            data-entry-id="${it.id}">
                      <i class="fas fa-edit"></i> Update
                    </button>
                  </div>
                  <!-- Entry details -->
                  <p>
                    <strong>ID:</strong> ${it.id}<br>
                    <strong>Total Pieces:</strong> ${it.total_pieces}<br>
                    <strong>Remark:</strong> ${it.remark||'N/A'}
                  </p>
                  <!-- Optional image preview -->
                  ${it.image_url ? `<p><img src="${it.image_url}" style="max-height:100px;"></p>` : ''}
                  <!-- Size breakdown table -->
                  <div class="table-responsive">
                    <table class="table table-sm table-bordered">
                      <thead>
                        <tr><th>Size Label</th><th>Pieces</th></tr>
                      </thead>
                      <tbody>${rows}</tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          `);
        });

        existingOffset += items.length;
      } catch (err) {
        console.error(err);
      } finally {
        loading = false;
      }
    }

    // Observe sentinel to trigger infinite scrolling
    new IntersectionObserver(e => {
      if (e[0].isIntersecting) loadMoreEntries();
    }, {
      root: null,
      rootMargin: '0px',
      threshold: .1
    }).observe(sentinel);

    // Reset and reload on search input
    $searchExisting.on('input', () => {
      existingOffset = 0;
      hasMore = true;
      $existingContainer.empty();
      loadMoreEntries();
    });

    // Initial load of entries
    loadMoreEntries();

    // ---------- 3. UPDATE MODAL ----------
    const $updateModal = $('#updateModal'),
          $updateForm  = $('#updateForm'),
          $sizesBody   = $('#updateSizesTable tbody'),
          $upId        = $('#updatingEntryId');

    // When modal is shown, fetch current sizes for the entry
    $updateModal.on('show.bs.modal', async e => {
      const id = $(e.relatedTarget).data('entry-id');
      $updateForm.attr('action', `/washingin/update/${id}`);
      $upId.text(id);
      $sizesBody.empty();

      const res = await fetch(`/washingin/update/${id}/json`);
      if (!res.ok) return alert('Fetch error');

      // Populate table with existing size usage and remaining
      (await res.json()).sizes.forEach(s => {
        $sizesBody.append(`
          <tr>
            <td>${s.size_label}</td>
            <td>${s.pieces}</td>
            <td>${s.remain}</td>
            <td>
              <input type="number" class="form-control" min="0"
                     data-size-id="${s.id}" autocomplete="off">
            </td>
          </tr>
        `);
      });
    });

    // After modal closes, refresh the existing entries list
    $updateModal.on('hidden.bs.modal', () => {
      $existingContainer.empty();
      existingOffset = 0;
      hasMore = true;
      loadMoreEntries();
    });

    // Validate increments and append hidden fields before submit
    $updateForm.on('submit', function (e) {
      const $form = $(this);
      $form.find('.updField').remove();

      let ok = true;
      $sizesBody.find('tr').each((_, tr) => {
        const $r      = $(tr),
              remain = +$r.children('td').eq(2).text(),
              $inp   = $r.find('input'),
              inc    = +$inp.val() || 0,
              id     = $inp.data('sizeId'),
              lbl    = $r.children('td').eq(0).text();

        // Ensure increment does not exceed remaining
        if (inc > remain) {
          alert(`Cannot add ${inc}; only ${remain} remain for ${lbl}`);
          ok = false;
          return false;
        }

        // Append hidden input if increment > 0
        if (inc > 0) {
          $('<input>', {
            type: 'hidden',
            name: `updateSizes[${id}]`,
            value: inc,
            class: 'updField'
          }).appendTo($form);
        }
      });

      if (!ok) e.preventDefault();
    });

  });
  </script>
</body>
</html>
