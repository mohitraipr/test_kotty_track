<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Finishing Dashboard â€“ Kotty</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="theme-color" content="#0d6efd">
  <meta name="msapplication-navbutton-color" content="#0d6efd">
  
  <!-- Google Font: Poppins -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap">
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" id="themeCSS">
  
  <!-- DataTables CSS -->
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
  <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.bootstrap5.min.css">
  
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  
  <style>
    :root {
      --primary-color: #0d6efd;
      --secondary-color: #6c757d;
      --background-color: #f8f9fa;
      --text-color: #343a40;
      --nav-bg: #212529;
      --nav-text: #f8f9fa;
      --nav-border: #141618;
      --card-bg: #ffffff;
      --hover-bg: #fafafa;
      --table-head-bg: #f2f2f2;
    }
    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      margin: 0;
      padding-top: 70px;
      padding-bottom: 3rem;
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    a { text-decoration: none; color: inherit; }
    /* Top Navigation */
    .top-nav {
      background-color: var(--nav-bg);
      border-bottom: 3px solid var(--nav-border);
      position: fixed;
      top: 0;
      width: 100%;
      z-index: 1030;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    }
    .top-nav .nav-brand {
      font-size: 1.7rem;
      font-weight: 600;
      color: var(--nav-text) !important;
    }
    .top-nav .nav-link { color: var(--nav-text) !important; font-size: 1rem; margin-right: 12px; }
    .top-nav .navbar-toggler { border-color: rgba(248,249,250,0.3); }
    .top-nav .navbar-toggler-icon { filter: invert(1); }
    /* Portal Header */
    .portal-header {
      text-align: center;
      margin: 1rem 0 2rem;
    }
    .portal-header h1 { font-size: 2rem; font-weight: 600; color: var(--text-color); }
    .portal-header p { font-size: 1rem; color: var(--secondary-color); }
    /* Autocomplete */
    .autocomplete-items {
      position: absolute;
      background: #fff;
      border: 1px solid #ccc;
      width: 100%;
      z-index: 9999;
      max-height: 300px;
      overflow-y: auto;
    }
    .autocomplete-items li {
      padding: 6px 10px;
      cursor: pointer;
      list-style: none;
    }
    .autocomplete-items li.active {
      background-color: var(--primary-color);
      color: #fff;
    }
    @media (max-width: 576px) {
      .portal-header h1 { font-size: 1.5rem; }
      .top-nav .nav-brand { font-size: 1.4rem; }
    }
  </style>
</head>
<body>
  <!-- TOP NAV BAR -->
  <nav class="navbar navbar-expand-lg top-nav">
    <div class="container-fluid">
      <a class="navbar-brand nav-brand" href="/finishingdashboard">        
        Finishing Dashboard
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
              data-bs-target="#mainNavigation" aria-controls="mainNavigation" aria-expanded="false"
              aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="mainNavigation">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item"><a class="nav-link active" href="/finishingdashboard">Dashboard</a></li>
          <li class="nav-item"><a class="nav-link" href="/finishingDashboard/approve">Approve</a></li>
          <li class="nav-item">
            <div class="form-check form-switch mt-2">
              <input class="form-check-input" type="checkbox" id="toggleDarkMode">
              <label class="form-check-label" for="toggleDarkMode">Dark Mode</label>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/logout" data-bs-toggle="tooltip" title="Sign Out">
              <i class="bi bi-box-arrow-left"></i> Logout
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- HEADER -->
  <div class="container">
    <div class="portal-header">
      <h1>Finishing Dashboard</h1>
      <p class="text-muted">Manage Finishing Entries</p>
    </div>
  </div>

  <!-- MAIN CONTENT -->
  <div class="container my-4">
    <% if (error && error.length) { %>
      <div class="alert alert-danger"><%= error.join(' | ') %></div>
    <% } %>
    <% if (success && success.length) { %>
      <div class="alert alert-success"><%= success.join(' | ') %></div>
    <% } %>

    <!-- NAV TABS -->
    <ul class="nav nav-tabs" id="mainTabs">
      <li class="nav-item">
        <a class="nav-link active" data-bs-toggle="tab" href="#createTab">Create Entry</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-bs-toggle="tab" href="#listTab">Existing Entries</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-bs-toggle="tab" href="#bulkDispatchTab">Bulk Dispatch</a>
      </li>
    </ul>
    <div class="tab-content mt-3">
      <!-- CREATE TAB -->
      <div class="tab-pane fade show active" id="createTab">
        <div class="card">
          <div class="card-header">Create a New Finishing Entry</div>
          <div class="card-body">
            <form action="/finishingdashboard/create" method="POST" enctype="multipart/form-data">
              <div class="mb-3 position-relative">
                <label class="form-label fw-semibold">Search Assignment (by Lot / SKU)</label>
                <input type="text" id="assignmentSearch" class="form-control" placeholder="Type Lot No or SKU..." autocomplete="on" required />
                <ul id="assignmentOptions" class="autocomplete-items d-none"></ul>
                <input type="hidden" name="selectedAssignmentId" id="selectedAssignmentId" />
              </div>
              <!-- Optional read-only lot number display can be added here -->
              <div class="row g-3 mb-3">
                <div class="col-md-6">
                  <label class="form-label">Remark (optional)</label>
                  <input type="text" class="form-control" name="remark" placeholder="Enter remark if any" />
                </div>
                <div class="col-md-6">
                  <label class="form-label">Image (optional)</label>
                  <input type="file" class="form-control" name="image_file" accept="image/*" />
                </div>
              </div>
              <div>
                <h5>Sizes</h5>
                <p class="text-muted small">After selecting an assignment, available sizes will load below.</p>
                <div id="sizesContainer" class="row g-2"></div>
              </div>
              <button type="submit" class="btn btn-primary mt-3 w-100">Create Finishing Entry</button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB -->
      <div class="tab-pane fade" id="listTab">
        <div class="d-flex justify-content-between mb-3">
          <h4>Existing Finishing Entries</h4>
          <a href="/finishingdashboard/download-all" class="btn btn-success btn-sm">Download Excel</a>
        </div>
        <div class="input-group mb-3">
          <input type="text" id="searchInput" class="form-control" placeholder="Search by Lot or SKU..." />
          <button id="searchBtn" class="btn btn-secondary">Search</button>
        </div>
        <table class="table table-bordered align-middle">
          <thead>
            <tr>
              <th>Lot ID</th>
              <th>Lot No</th>
              <th>SKU</th>
              <th>Total Pieces</th>
              <th>Remark</th>
              <th>Created</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="finishingTableBody"></tbody>
        </table>
        <div class="text-center">
          <button id="loadMoreBtn" class="btn btn-outline-primary">Load More</button>
        </div>
      </div>

      <!-- BULK DISPATCH TAB -->
      <div class="tab-pane fade" id="bulkDispatchTab">
        <div class="card mb-3">
          <div class="card-header">Bulk Dispatch (Dispatch All Remaining Pieces)</div>
          <div class="card-body">
            <table class="table table-bordered" id="bulkDispatchTable">
              <thead>
                <tr>
                  <th>Select</th>
                  <th>Lot ID</th>
                  <th>Lot No</th>
                  <th>SKU</th>
                  <th>Total Pieces</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
            <div class="mb-3">
              <label class="form-label">Select Destination</label>
              <select class="form-select" id="bulkDestinationSelect" required>
                <option value="">Select Destination</option>
                <!-- Updated destination options -->
                <option value="amazonpo">amazonpo</option>
                <option value="flipkartalfa">flipkartalfa</option>
                <option value="flipkartfa">flipkartfa</option>
                <option value="ekart">ekart</option>
                <option value="myntra">myntra</option>
                <option value="ajio">ajio</option>
                <option value="warehouse79">warehouse79</option>
                <option value="warehouse78">warehouse78</option>
                <option value="warehousemandir">warehousemandir</option>
                <option value="on_shoot">on shoot</option>
                <option value="other">Other</option>
              </select>
              <!-- For 'other', a remark field will appear -->
              <input type="text" id="bulkOtherDestination" class="form-control mt-2 d-none" placeholder="Enter custom destination" />
            </div>
            <button id="bulkDispatchBtn" class="btn btn-primary w-100">Dispatch Selected All</button>
          </div>
        </div>
        <div class="card">
          <div class="card-header">Bulk Dispatch via Excel</div>
          <div class="card-body">
            <a href="/finishingdashboard/download-bulk-template" class="btn btn-success mb-2 w-100">Download Excel Template</a>
            <form action="/finishingdashboard/bulk-dispatch-excel" method="POST" enctype="multipart/form-data">
              <div class="mb-3">
                <label class="form-label">Upload Excel File</label>
                <input type="file" name="excel_file" class="form-control" accept=".xlsx, .xls" required />
              </div>
              <button type="submit" class="btn btn-primary w-100">Upload and Process</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div class="modal fade" id="updateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST" action="">
          <div class="modal-header">
            <h5 class="modal-title">Update Finishing Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div id="updateAlertContainer"></div>
            <p>Updating Lot: <span id="updatingEntryId">-</span></p>
            <table class="table table-bordered" id="updateSizesTable">
              <thead>
                <tr>
                  <th>Size Label</th>
                  <th>Already Used</th>
                  <th>Max Remain</th>
                  <th>New Pieces</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
            <small class="text-muted">Leave blank or 0 if no increment.</small>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              <i class="bi bi-x-circle"></i> Cancel
            </button>
            <!-- The update submit button will be disabled (grey) if all sizes have zero remain -->
            <button type="submit" id="updateSubmitBtn" class="btn btn-primary">
              <i class="bi bi-check2-circle"></i> Save Updates
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- DISPATCH MODAL -->
  <div class="modal fade" id="dispatchModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="dispatchForm" method="POST" action="">
          <div class="modal-header">
            <h5 class="modal-title">Dispatch Finishing Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div id="dispatchAlertContainer"></div>
            <p>Dispatching Lot: <span id="dispatchEntryId">-</span></p>
            <div class="mb-3">
              <label class="form-label">Select Destination</label>
              <select class="form-select" name="destination" id="destinationSelect" required>
                <option value="">Select Destination</option>
                <!-- Updated destination options -->
                <option value="amazonpo">amazonpo</option>
                <option value="flipkartalfa">flipkartalfa</option>
                <option value="flipkartfa">flipkartfa</option>
                <option value="ekart">ekart</option>
                <option value="myntra">myntra</option>
                <option value="ajio">ajio</option>
                <option value="warehouse79">warehouse79</option>
                <option value="warehouse78">warehouse78</option>
                <option value="warehousemandir">warehousemandir</option>
                <option value="on_shoot">on shoot</option>
                <option value="other">Other</option>
              </select>
              <input type="text" id="otherDestination" name="customDestination" class="form-control mt-2 d-none" placeholder="Enter custom destination" />
            </div>
            <table class="table table-bordered" id="dispatchSizesTable">
              <thead>
                <tr>
                  <th>Size Label</th>
                  <th>Total Produced</th>
                  <th>Already Dispatched</th>
                  <th>Available</th>
                  <th>Dispatch Quantity</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
            <small class="text-muted">Enter dispatch quantity. If full quantity is dispatched, inputs are read-only.</small>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              <i class="bi bi-x-circle"></i> Cancel
            </button>
            <button type="submit" id="dispatchSubmitBtn" class="btn btn-primary">
              <i class="bi bi-check2-circle"></i> Submit Dispatch
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- SCRIPTS -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
  <script src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"></script>
  <script src="https://cdn.datatables.net/responsive/2.4.1/js/responsive.bootstrap5.min.js"></script>
  
  <script>
    // Preserve active tab using localStorage
    document.addEventListener('DOMContentLoaded', function() {
      const storedTab = localStorage.getItem('activeTab');
      if (storedTab) {
        const triggerEl = document.querySelector('a[data-bs-toggle="tab"][href="' + storedTab + '"]');
        if (triggerEl) { new bootstrap.Tab(triggerEl).show(); }
      }
      const tabLinks = document.querySelectorAll('a[data-bs-toggle="tab"]');
      tabLinks.forEach(tab => {
        tab.addEventListener('shown.bs.tab', function(e) {
          localStorage.setItem('activeTab', e.target.getAttribute('href'));
        });
      });
    });

    /****************************************
     * Autocomplete for Create Entry
     ****************************************/
    const assignments = <%- JSON.stringify(assignments) %> || [];
    const assignmentSearch = document.getElementById('assignmentSearch');
    const assignmentOptions = document.getElementById('assignmentOptions');
    const assignmentIdField = document.getElementById('selectedAssignmentId');
    const sizesContainer = document.getElementById('sizesContainer');
    let currentFocus = -1;
    function showOptions(list) {
      assignmentOptions.innerHTML = '';
      list.forEach(item => {
        const li = document.createElement('li');
        li.textContent = `Lot ${item.lot_no} (SKU: ${item.sku}${item.cutting_sku ? ' / Cutting SKU: ' + item.cutting_sku : ''}) [${item.department}] - Cutting Remark: ${item.cutting_remark || 'N/A'}`;
        li.dataset.value = item.id;
        li.dataset.lotno = item.lot_no;
        assignmentOptions.appendChild(li);
      });
      assignmentOptions.classList.remove('d-none');
    }
    function hideOptions() {
      assignmentOptions.classList.add('d-none');
      currentFocus = -1;
    }
    assignmentSearch.addEventListener('input', () => {
      const val = assignmentSearch.value.trim().toLowerCase();
      if (!val) { hideOptions(); return; }
      const filtered = assignments.filter(a =>
        (a.lot_no && a.lot_no.toLowerCase().includes(val)) ||
        (a.sku && a.sku.toLowerCase().includes(val))
      );
      if (filtered.length) showOptions(filtered);
      else { assignmentOptions.innerHTML = ''; hideOptions(); }
    });
    assignmentSearch.addEventListener('keydown', e => {
      const items = assignmentOptions.querySelectorAll('li');
      if (!items.length) return;
      if (e.key === 'ArrowDown') { 
        e.preventDefault(); 
        currentFocus++; 
        if (currentFocus >= items.length) currentFocus = items.length - 1; 
        setActive(items); 
      }
      else if (e.key === 'ArrowUp') { 
        e.preventDefault(); 
        currentFocus--; 
        if (currentFocus < 0) currentFocus = 0; 
        setActive(items); 
      }
      else if (e.key === 'Enter') { 
        e.preventDefault(); 
        if (currentFocus > -1 && items[currentFocus]) pickItem(items[currentFocus]); 
      }
    });
    function setActive(items) {
      items.forEach((li, idx) => { li.classList.toggle('active', idx === currentFocus); });
    }
    function pickItem(li) {
      assignmentIdField.value = li.dataset.value;
      assignmentSearch.value = li.textContent;
      hideOptions();
      loadSizes(li.dataset.value);
    }
    assignmentOptions.addEventListener('click', e => { if (e.target && e.target.matches('li')) pickItem(e.target); });
    document.addEventListener('click', e => {
      if (!assignmentSearch.contains(e.target) && !assignmentOptions.contains(e.target)) hideOptions();
    });

    /****************************************
     * Load Sizes for Create Entry
     ****************************************/
    async function loadSizes(assignmentId) {
      sizesContainer.innerHTML = '';
      if (!assignmentId) return;
      try {
        const res = await fetch(`/finishingdashboard/get-assignment-sizes/${assignmentId}`);
        if (!res.ok) throw new Error('Failed to fetch sizes');
        const data = await res.json();
        if (!Array.isArray(data) || !data.length) {
          sizesContainer.innerHTML = '<div class="col-12 text-danger">No sizes available.</div>';
          return;
        }
        data.forEach(sz => {
          const div = document.createElement('div');
          div.classList.add('col-sm-6', 'col-md-4');
          div.innerHTML = `
            <div class="input-group">
              <span class="input-group-text">${sz.size_label}<br/><small>Remain: ${sz.remain}</small></span>
              <input type="number" name="sizes[${sz.size_label}]" min="1" max="${sz.remain}" value="${sz.remain}" class="form-control" />
            </div>
          `;
          sizesContainer.appendChild(div);
        });
      } catch (err) { 
        console.error(err); 
        sizesContainer.innerHTML = '<div class="col-12 text-danger">Error loading sizes.</div>'; 
      }
    }

    /****************************************
     * Lazy Load Existing Entries
     ****************************************/
    let offset = 0, hasMore = true, currentSearch = '';
    const finishingTableBody = document.getElementById('finishingTableBody');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const searchBtn = document.getElementById('searchBtn');
    const searchInput = document.getElementById('searchInput');
    async function loadEntries() {
      if (!hasMore) return;
      try {
        const url = `/finishingdashboard/list-entries?search=${encodeURIComponent(currentSearch)}&offset=${offset}`;
        const resp = await fetch(url);
        if (!resp.ok) throw new Error('Failed to load entries');
        const json = await resp.json();
        const rows = json.data || [];
        rows.forEach(entry => {
          const dispatchBtnClass = entry.fullyDispatched ? 'btn-secondary' : 'btn-success';
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${entry.id}</td>
            <td>${entry.lot_no}</td>
            <td>${entry.sku}</td>
            <td>${entry.total_pieces}</td>
            <td>${entry.remark || ''}</td>
            <td>${entry.created_at}</td>
            <td>
              <a href="/finishingdashboard/challan/${entry.id}" target="_blank" class="btn btn-sm btn-info mb-1">Challan</a>
              <button class="btn btn-sm btn-warning mb-1" data-bs-toggle="modal" data-bs-target="#updateModal" data-entry-id="${entry.id}">Update</button>
              <button class="btn btn-sm ${dispatchBtnClass} mb-1" data-bs-toggle="modal" data-bs-target="#dispatchModal" data-entry-id="${entry.id}">Dispatch</button>
            </td>
          `;
          finishingTableBody.appendChild(tr);
        });
        offset += rows.length;
        hasMore = json.hasMore;
        if (!hasMore) loadMoreBtn.disabled = true;
      } catch (err) { console.error(err); }
    }
    loadMoreBtn.addEventListener('click', loadEntries);
    searchBtn.addEventListener('click', () => {
      currentSearch = searchInput.value.trim();
      offset = 0; hasMore = true;
      finishingTableBody.innerHTML = '';
      loadMoreBtn.disabled = false;
      loadEntries();
    });
    loadEntries();

    /****************************************
     * Update Modal
     ****************************************/
    const updateModal = document.getElementById('updateModal');
    const updateForm = document.getElementById('updateForm');
    const updateSizesTableBody = document.getElementById('updateSizesTable').querySelector('tbody');
    const updatingEntryId = document.getElementById('updatingEntryId');
    updateModal.addEventListener('show.bs.modal', async (e) => {
      const button = e.relatedTarget;
      const entryId = button.getAttribute('data-entry-id');
      updateForm.action = '/finishingdashboard/update/' + entryId;
      updatingEntryId.textContent = entryId;
      updateSizesTableBody.innerHTML = '';
      document.getElementById('updateAlertContainer').innerHTML = '';
      try {
        const resp = await fetch(`/finishingdashboard/update/${entryId}/json`);
        if (!resp.ok) throw new Error('Failed to fetch update JSON');
        const data = await resp.json();
        data.sizes.forEach(sz => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${sz.size_label}</td>
            <td>${sz.pieces}</td>
            <td>${sz.remain}</td>
            <td>
              <input type="number" min="0" class="form-control" placeholder="0" data-size-label="${sz.size_label}" ${sz.remain === 0 ? 'readonly' : ''} />
            </td>
          `;
          updateSizesTableBody.appendChild(tr);
        });
        // If all sizes have 0 remain, disable the update button.
        if (data.sizes.every(sz => Number(sz.remain) === 0)) {
          document.getElementById('updateSubmitBtn').disabled = true;
          document.getElementById('updateSubmitBtn').classList.remove('btn-primary');
          document.getElementById('updateSubmitBtn').classList.add('btn-secondary');
        } else {
          document.getElementById('updateSubmitBtn').disabled = false;
          document.getElementById('updateSubmitBtn').classList.remove('btn-secondary');
          document.getElementById('updateSubmitBtn').classList.add('btn-primary');
        }
      } catch (err) { console.error(err); }
    });
    updateForm.addEventListener('submit', (evt) => {
      const oldFields = document.querySelectorAll('.updateSizeField');
      oldFields.forEach(f => f.remove());
      const rows = updateSizesTableBody.querySelectorAll('tr');
      for (const row of rows) {
        const sizeLabel = row.children[0].textContent;
        const remain = parseInt(row.children[2].textContent, 10);
        const inp = row.children[3].querySelector('input');
        const val = parseInt(inp.value || '0', 10);
        if (val > remain) {
          alert(`Cannot add ${val} for size ${sizeLabel}, only ${remain} remain.`);
          evt.preventDefault();
          return;
        }
        if (val > 0) {
          const hidden = document.createElement('input');
          hidden.type = 'hidden';
          hidden.name = `updateSizes[${sizeLabel}]`;
          hidden.value = val;
          hidden.classList.add('updateSizeField');
          updateForm.appendChild(hidden);
        }
      }
    });

    /****************************************
     * Dispatch Modal
     ****************************************/
    const dispatchModal = document.getElementById('dispatchModal');
    const dispatchForm = document.getElementById('dispatchForm');
    const dispatchSizesTableBody = document.getElementById('dispatchSizesTable').querySelector('tbody');
    const dispatchEntryIdElem = document.getElementById('dispatchEntryId');
    const destinationSelect = document.getElementById('destinationSelect');
    const otherDestinationInput = document.getElementById('otherDestination');
    const dispatchSubmitBtn = document.getElementById('dispatchSubmitBtn');
    destinationSelect.addEventListener('change', () => {
      if (destinationSelect.value === 'other') {
        otherDestinationInput.classList.remove('d-none');
      } else {
        otherDestinationInput.classList.add('d-none');
      }
    });
    dispatchModal.addEventListener('show.bs.modal', async (e) => {
      const button = e.relatedTarget;
      const entryId = button.getAttribute('data-entry-id');
      dispatchForm.action = '/finishingdashboard/dispatch/' + entryId;
      dispatchEntryIdElem.textContent = entryId;
      dispatchSizesTableBody.innerHTML = '';
      document.getElementById('dispatchAlertContainer').innerHTML = '';
      destinationSelect.value = '';
      otherDestinationInput.value = '';
      dispatchSubmitBtn.disabled = false;
      dispatchSubmitBtn.classList.remove('btn-secondary');
      dispatchSubmitBtn.classList.add('btn-primary');
      try {
        const resp = await fetch(`/finishingdashboard/dispatch/${entryId}/json`);
        if (!resp.ok) throw new Error('Failed to fetch dispatch data');
        const data = await resp.json();
        data.sizes.forEach(sz => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${sz.size_label}</td>
            <td>${sz.total_produced}</td>
            <td>${sz.dispatched}</td>
            <td>${sz.available}</td>
            <td>
              <input type="number" min="0" max="${sz.available}" value="0" class="form-control" data-size-label="${sz.size_label}" ${sz.available === 0 ? 'readonly' : ''} />
            </td>
          `;
          dispatchSizesTableBody.appendChild(tr);
        });
        if (data.fullyDispatched) {
          const msg = document.createElement('p');
          msg.classList.add('text-success');
          msg.textContent = 'All pieces have been dispatched for this lot.';
          document.getElementById('dispatchAlertContainer').appendChild(msg);
          dispatchSubmitBtn.classList.remove('btn-primary');
          dispatchSubmitBtn.classList.add('btn-secondary');
        }
      } catch (err) { console.error(err); }
    });
    dispatchForm.addEventListener('submit', (evt) => {
      const oldFields = document.querySelectorAll('.dispatchSizeField');
      oldFields.forEach(f => f.remove());
      const rows = dispatchSizesTableBody.querySelectorAll('tr');
      for (const row of rows) {
        const sizeLabel = row.children[0].textContent;
        const available = parseInt(row.children[3].textContent, 10);
        const inp = row.children[4].querySelector('input');
        const val = parseInt(inp.value || '0', 10);
        if (val > available) {
          alert(`Cannot dispatch ${val} for size ${sizeLabel}, only ${available} available.`);
          evt.preventDefault();
          return;
        }
        if (val > 0) {
          const hidden = document.createElement('input');
          hidden.type = 'hidden';
          hidden.name = `dispatchSizes[${sizeLabel}]`;
          hidden.value = val;
          hidden.classList.add('dispatchSizeField');
          dispatchForm.appendChild(hidden);
        }
      }
    });

    /****************************************
     * Bulk Dispatch Tab
     ****************************************/
    // Add event listener for bulk destination select to show remark field when "other" is chosen.
    const bulkDestinationSelect = document.getElementById('bulkDestinationSelect');
    const bulkOtherDestination = document.getElementById('bulkOtherDestination');
    bulkDestinationSelect.addEventListener('change', () => {
      if (bulkDestinationSelect.value === 'other') {
        bulkOtherDestination.classList.remove('d-none');
      } else {
        bulkOtherDestination.classList.add('d-none');
      }
    });

    async function loadBulkDispatchTable() {
      try {
        const resp = await fetch(`/finishingdashboard/list-entries?search=&offset=0`);
        if (!resp.ok) throw new Error('Failed to load entries for bulk dispatch');
        const json = await resp.json();
        const tbody = document.querySelector('#bulkDispatchTable tbody');
        tbody.innerHTML = '';
        for (const entry of json.data) {
          const dispatchResp = await fetch(`/finishingdashboard/dispatch/${entry.id}/json`);
          if (!dispatchResp.ok) continue;
          const dispatchData = await dispatchResp.json();
          if (dispatchData.fullyDispatched) continue;
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td><input type="checkbox" class="bulkEntryCheckbox" data-entry-id="${entry.id}" /></td>
            <td>${entry.id}</td>
            <td>${entry.lot_no}</td>
            <td>${entry.sku}</td>
            <td>${entry.total_pieces}</td>
            <td>Pending</td>
          `;
          tbody.appendChild(tr);
        }
      } catch (err) { console.error(err); }
    }
    document.querySelector('a[data-bs-toggle="tab"][href="#bulkDispatchTab"]').addEventListener('shown.bs.tab', loadBulkDispatchTable);
    document.getElementById('bulkDispatchBtn').addEventListener('click', async () => {
      const checkboxes = document.querySelectorAll('.bulkEntryCheckbox:checked');
      if (checkboxes.length === 0) { alert('Please select at least one lot.'); return; }
      let destination = bulkDestinationSelect.value;
      if (destination === 'other') {
        destination = bulkOtherDestination.value;
        if (!destination) { alert('Please enter custom destination.'); return; }
      }
      for (const cb of checkboxes) {
        const entryId = cb.getAttribute('data-entry-id');
        await fetch(`/finishingdashboard/dispatch-all/${entryId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: `destination=${encodeURIComponent(destination)}`
        });
      }
      alert('Bulk dispatch processed.');
      loadBulkDispatchTable();
    });
  </script>
</body>
</html>
